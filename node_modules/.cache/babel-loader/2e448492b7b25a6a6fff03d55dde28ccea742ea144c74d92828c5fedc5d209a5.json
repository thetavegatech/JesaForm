{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing.oned {*/\nimport BarcodeFormat from '../BarcodeFormat';\nimport ChecksumException from '../ChecksumException';\nimport DecodeHintType from '../DecodeHintType';\nimport FormatException from '../FormatException';\nimport NotFoundException from '../NotFoundException';\n// import Reader from '../Reader';\nimport Result from '../Result';\n// import ResultMetadataType from '../ResultMetadataType';\nimport ResultPoint from '../ResultPoint';\nimport OneDReader from './OneDReader';\n/**\n * <p>Decodes Code 128 barcodes.</p>\n *\n * @author Sean Owen\n */\nvar Code128Reader = /** @class */function (_super) {\n  __extends(Code128Reader, _super);\n  function Code128Reader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Code128Reader.findStartPattern = function (row) {\n    var width = row.getSize();\n    var rowOffset = row.getNextSet(0);\n    var counterPosition = 0;\n    var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n    var patternStart = rowOffset;\n    var isWhite = false;\n    var patternLength = 6;\n    for (var i = rowOffset; i < width; i++) {\n      if (row.get(i) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          var bestVariance = Code128Reader.MAX_AVG_VARIANCE;\n          var bestMatch = -1;\n          for (var startCode = Code128Reader.CODE_START_A; startCode <= Code128Reader.CODE_START_C; startCode++) {\n            var variance = OneDReader.patternMatchVariance(counters, Code128Reader.CODE_PATTERNS[startCode], Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n            if (variance < bestVariance) {\n              bestVariance = variance;\n              bestMatch = startCode;\n            }\n          }\n          // Look for whitespace before start pattern, >= 50% of width of start pattern\n          if (bestMatch >= 0 && row.isRange(Math.max(0, patternStart - (i - patternStart) / 2), patternStart, false)) {\n            return Int32Array.from([patternStart, i, bestMatch]);\n          }\n          patternStart += counters[0] + counters[1];\n          counters = counters.slice(2, counters.length - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException();\n  };\n  Code128Reader.decodeCode = function (row, counters, rowOffset) {\n    OneDReader.recordPattern(row, rowOffset, counters);\n    var bestVariance = Code128Reader.MAX_AVG_VARIANCE; // worst variance we'll accept\n    var bestMatch = -1;\n    for (var d = 0; d < Code128Reader.CODE_PATTERNS.length; d++) {\n      var pattern = Code128Reader.CODE_PATTERNS[d];\n      var variance = this.patternMatchVariance(counters, pattern, Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n      if (variance < bestVariance) {\n        bestVariance = variance;\n        bestMatch = d;\n      }\n    }\n    // TODO We're overlooking the fact that the STOP pattern has 7 values, not 6.\n    if (bestMatch >= 0) {\n      return bestMatch;\n    } else {\n      throw new NotFoundException();\n    }\n  };\n  Code128Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var convertFNC1 = hints && hints.get(DecodeHintType.ASSUME_GS1) === true;\n    var startPatternInfo = Code128Reader.findStartPattern(row);\n    var startCode = startPatternInfo[2];\n    var currentRawCodesIndex = 0;\n    var rawCodes = new Uint8Array(20);\n    rawCodes[currentRawCodesIndex++] = startCode;\n    var codeSet;\n    switch (startCode) {\n      case Code128Reader.CODE_START_A:\n        codeSet = Code128Reader.CODE_CODE_A;\n        break;\n      case Code128Reader.CODE_START_B:\n        codeSet = Code128Reader.CODE_CODE_B;\n        break;\n      case Code128Reader.CODE_START_C:\n        codeSet = Code128Reader.CODE_CODE_C;\n        break;\n      default:\n        throw new FormatException();\n    }\n    var done = false;\n    var isNextShifted = false;\n    var result = '';\n    var lastStart = startPatternInfo[0];\n    var nextStart = startPatternInfo[1];\n    var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n    var lastCode = 0;\n    var code = 0;\n    var checksumTotal = startCode;\n    var multiplier = 0;\n    var lastCharacterWasPrintable = true;\n    var upperMode = false;\n    var shiftUpperMode = false;\n    while (!done) {\n      var unshift = isNextShifted;\n      isNextShifted = false;\n      // Save off last code\n      lastCode = code;\n      // Decode another code from image\n      code = Code128Reader.decodeCode(row, counters, nextStart);\n      rawCodes[currentRawCodesIndex++] = code;\n      // Remember whether the last code was printable or not (excluding CODE_STOP)\n      if (code !== Code128Reader.CODE_STOP) {\n        lastCharacterWasPrintable = true;\n      }\n      // Add to checksum computation (if not CODE_STOP of course)\n      if (code !== Code128Reader.CODE_STOP) {\n        multiplier++;\n        checksumTotal += multiplier * code;\n      }\n      // Advance to where the next code will to start\n      lastStart = nextStart;\n      nextStart += counters.reduce(function (previous, current) {\n        return previous + current;\n      }, 0);\n      // Take care of illegal start codes\n      switch (code) {\n        case Code128Reader.CODE_START_A:\n        case Code128Reader.CODE_START_B:\n        case Code128Reader.CODE_START_C:\n          throw new FormatException();\n      }\n      switch (codeSet) {\n        case Code128Reader.CODE_CODE_A:\n          if (code < 64) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(' '.charCodeAt(0) + code);\n            } else {\n              result += String.fromCharCode(' '.charCodeAt(0) + code + 128);\n            }\n            shiftUpperMode = false;\n          } else if (code < 96) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(code - 64);\n            } else {\n              result += String.fromCharCode(code + 64);\n            }\n            shiftUpperMode = false;\n          } else {\n            // Don't let CODE_STOP, which always appears, affect whether whether we think the last\n            // code was printable or not.\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_FNC_2:\n              case Code128Reader.CODE_FNC_3:\n                // do nothing?\n                break;\n              case Code128Reader.CODE_FNC_4_A:\n                if (!upperMode && shiftUpperMode) {\n                  upperMode = true;\n                  shiftUpperMode = false;\n                } else if (upperMode && shiftUpperMode) {\n                  upperMode = false;\n                  shiftUpperMode = false;\n                } else {\n                  shiftUpperMode = true;\n                }\n                break;\n              case Code128Reader.CODE_SHIFT:\n                isNextShifted = true;\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_CODE_B:\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_CODE_C:\n                codeSet = Code128Reader.CODE_CODE_C;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n        case Code128Reader.CODE_CODE_B:\n          if (code < 96) {\n            if (shiftUpperMode === upperMode) {\n              result += String.fromCharCode(' '.charCodeAt(0) + code);\n            } else {\n              result += String.fromCharCode(' '.charCodeAt(0) + code + 128);\n            }\n            shiftUpperMode = false;\n          } else {\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_FNC_2:\n              case Code128Reader.CODE_FNC_3:\n                // do nothing?\n                break;\n              case Code128Reader.CODE_FNC_4_B:\n                if (!upperMode && shiftUpperMode) {\n                  upperMode = true;\n                  shiftUpperMode = false;\n                } else if (upperMode && shiftUpperMode) {\n                  upperMode = false;\n                  shiftUpperMode = false;\n                } else {\n                  shiftUpperMode = true;\n                }\n                break;\n              case Code128Reader.CODE_SHIFT:\n                isNextShifted = true;\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_A:\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_C:\n                codeSet = Code128Reader.CODE_CODE_C;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n        case Code128Reader.CODE_CODE_C:\n          if (code < 100) {\n            if (code < 10) {\n              result += '0';\n            }\n            result += code;\n          } else {\n            if (code !== Code128Reader.CODE_STOP) {\n              lastCharacterWasPrintable = false;\n            }\n            switch (code) {\n              case Code128Reader.CODE_FNC_1:\n                if (convertFNC1) {\n                  if (result.length === 0) {\n                    // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                    // is FNC1 then this is GS1-128. We add the symbology identifier.\n                    result += ']C1';\n                  } else {\n                    // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                    result += String.fromCharCode(29);\n                  }\n                }\n                break;\n              case Code128Reader.CODE_CODE_A:\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n              case Code128Reader.CODE_CODE_B:\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n              case Code128Reader.CODE_STOP:\n                done = true;\n                break;\n            }\n          }\n          break;\n      }\n      // Unshift back to another code set if we were shifted\n      if (unshift) {\n        codeSet = codeSet === Code128Reader.CODE_CODE_A ? Code128Reader.CODE_CODE_B : Code128Reader.CODE_CODE_A;\n      }\n    }\n    var lastPatternSize = nextStart - lastStart;\n    // Check for ample whitespace following pattern, but, to do this we first need to remember that\n    // we fudged decoding CODE_STOP since it actually has 7 bars, not 6. There is a black bar left\n    // to read off. Would be slightly better to properly read. Here we just skip it:\n    nextStart = row.getNextUnset(nextStart);\n    if (!row.isRange(nextStart, Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2), false)) {\n      throw new NotFoundException();\n    }\n    // Pull out from sum the value of the penultimate check code\n    checksumTotal -= multiplier * lastCode;\n    // lastCode is the checksum then:\n    if (checksumTotal % 103 !== lastCode) {\n      throw new ChecksumException();\n    }\n    // Need to pull out the check digits from string\n    var resultLength = result.length;\n    if (resultLength === 0) {\n      // false positive\n      throw new NotFoundException();\n    }\n    // Only bother if the result had at least one character, and if the checksum digit happened to\n    // be a printable character. If it was just interpreted as a control code, nothing to remove.\n    if (resultLength > 0 && lastCharacterWasPrintable) {\n      if (codeSet === Code128Reader.CODE_CODE_C) {\n        result = result.substring(0, resultLength - 2);\n      } else {\n        result = result.substring(0, resultLength - 1);\n      }\n    }\n    var left = (startPatternInfo[1] + startPatternInfo[0]) / 2.0;\n    var right = lastStart + lastPatternSize / 2.0;\n    var rawCodesSize = rawCodes.length;\n    var rawBytes = new Uint8Array(rawCodesSize);\n    for (var i = 0; i < rawCodesSize; i++) {\n      rawBytes[i] = rawCodes[i];\n    }\n    var points = [new ResultPoint(left, rowNumber), new ResultPoint(right, rowNumber)];\n    return new Result(result, rawBytes, 0, points, BarcodeFormat.CODE_128, new Date().getTime());\n  };\n  Code128Reader.CODE_PATTERNS = [Int32Array.from([2, 1, 2, 2, 2, 2]), Int32Array.from([2, 2, 2, 1, 2, 2]), Int32Array.from([2, 2, 2, 2, 2, 1]), Int32Array.from([1, 2, 1, 2, 2, 3]), Int32Array.from([1, 2, 1, 3, 2, 2]), Int32Array.from([1, 3, 1, 2, 2, 2]), Int32Array.from([1, 2, 2, 2, 1, 3]), Int32Array.from([1, 2, 2, 3, 1, 2]), Int32Array.from([1, 3, 2, 2, 1, 2]), Int32Array.from([2, 2, 1, 2, 1, 3]), Int32Array.from([2, 2, 1, 3, 1, 2]), Int32Array.from([2, 3, 1, 2, 1, 2]), Int32Array.from([1, 1, 2, 2, 3, 2]), Int32Array.from([1, 2, 2, 1, 3, 2]), Int32Array.from([1, 2, 2, 2, 3, 1]), Int32Array.from([1, 1, 3, 2, 2, 2]), Int32Array.from([1, 2, 3, 1, 2, 2]), Int32Array.from([1, 2, 3, 2, 2, 1]), Int32Array.from([2, 2, 3, 2, 1, 1]), Int32Array.from([2, 2, 1, 1, 3, 2]), Int32Array.from([2, 2, 1, 2, 3, 1]), Int32Array.from([2, 1, 3, 2, 1, 2]), Int32Array.from([2, 2, 3, 1, 1, 2]), Int32Array.from([3, 1, 2, 1, 3, 1]), Int32Array.from([3, 1, 1, 2, 2, 2]), Int32Array.from([3, 2, 1, 1, 2, 2]), Int32Array.from([3, 2, 1, 2, 2, 1]), Int32Array.from([3, 1, 2, 2, 1, 2]), Int32Array.from([3, 2, 2, 1, 1, 2]), Int32Array.from([3, 2, 2, 2, 1, 1]), Int32Array.from([2, 1, 2, 1, 2, 3]), Int32Array.from([2, 1, 2, 3, 2, 1]), Int32Array.from([2, 3, 2, 1, 2, 1]), Int32Array.from([1, 1, 1, 3, 2, 3]), Int32Array.from([1, 3, 1, 1, 2, 3]), Int32Array.from([1, 3, 1, 3, 2, 1]), Int32Array.from([1, 1, 2, 3, 1, 3]), Int32Array.from([1, 3, 2, 1, 1, 3]), Int32Array.from([1, 3, 2, 3, 1, 1]), Int32Array.from([2, 1, 1, 3, 1, 3]), Int32Array.from([2, 3, 1, 1, 1, 3]), Int32Array.from([2, 3, 1, 3, 1, 1]), Int32Array.from([1, 1, 2, 1, 3, 3]), Int32Array.from([1, 1, 2, 3, 3, 1]), Int32Array.from([1, 3, 2, 1, 3, 1]), Int32Array.from([1, 1, 3, 1, 2, 3]), Int32Array.from([1, 1, 3, 3, 2, 1]), Int32Array.from([1, 3, 3, 1, 2, 1]), Int32Array.from([3, 1, 3, 1, 2, 1]), Int32Array.from([2, 1, 1, 3, 3, 1]), Int32Array.from([2, 3, 1, 1, 3, 1]), Int32Array.from([2, 1, 3, 1, 1, 3]), Int32Array.from([2, 1, 3, 3, 1, 1]), Int32Array.from([2, 1, 3, 1, 3, 1]), Int32Array.from([3, 1, 1, 1, 2, 3]), Int32Array.from([3, 1, 1, 3, 2, 1]), Int32Array.from([3, 3, 1, 1, 2, 1]), Int32Array.from([3, 1, 2, 1, 1, 3]), Int32Array.from([3, 1, 2, 3, 1, 1]), Int32Array.from([3, 3, 2, 1, 1, 1]), Int32Array.from([3, 1, 4, 1, 1, 1]), Int32Array.from([2, 2, 1, 4, 1, 1]), Int32Array.from([4, 3, 1, 1, 1, 1]), Int32Array.from([1, 1, 1, 2, 2, 4]), Int32Array.from([1, 1, 1, 4, 2, 2]), Int32Array.from([1, 2, 1, 1, 2, 4]), Int32Array.from([1, 2, 1, 4, 2, 1]), Int32Array.from([1, 4, 1, 1, 2, 2]), Int32Array.from([1, 4, 1, 2, 2, 1]), Int32Array.from([1, 1, 2, 2, 1, 4]), Int32Array.from([1, 1, 2, 4, 1, 2]), Int32Array.from([1, 2, 2, 1, 1, 4]), Int32Array.from([1, 2, 2, 4, 1, 1]), Int32Array.from([1, 4, 2, 1, 1, 2]), Int32Array.from([1, 4, 2, 2, 1, 1]), Int32Array.from([2, 4, 1, 2, 1, 1]), Int32Array.from([2, 2, 1, 1, 1, 4]), Int32Array.from([4, 1, 3, 1, 1, 1]), Int32Array.from([2, 4, 1, 1, 1, 2]), Int32Array.from([1, 3, 4, 1, 1, 1]), Int32Array.from([1, 1, 1, 2, 4, 2]), Int32Array.from([1, 2, 1, 1, 4, 2]), Int32Array.from([1, 2, 1, 2, 4, 1]), Int32Array.from([1, 1, 4, 2, 1, 2]), Int32Array.from([1, 2, 4, 1, 1, 2]), Int32Array.from([1, 2, 4, 2, 1, 1]), Int32Array.from([4, 1, 1, 2, 1, 2]), Int32Array.from([4, 2, 1, 1, 1, 2]), Int32Array.from([4, 2, 1, 2, 1, 1]), Int32Array.from([2, 1, 2, 1, 4, 1]), Int32Array.from([2, 1, 4, 1, 2, 1]), Int32Array.from([4, 1, 2, 1, 2, 1]), Int32Array.from([1, 1, 1, 1, 4, 3]), Int32Array.from([1, 1, 1, 3, 4, 1]), Int32Array.from([1, 3, 1, 1, 4, 1]), Int32Array.from([1, 1, 4, 1, 1, 3]), Int32Array.from([1, 1, 4, 3, 1, 1]), Int32Array.from([4, 1, 1, 1, 1, 3]), Int32Array.from([4, 1, 1, 3, 1, 1]), Int32Array.from([1, 1, 3, 1, 4, 1]), Int32Array.from([1, 1, 4, 1, 3, 1]), Int32Array.from([3, 1, 1, 1, 4, 1]), Int32Array.from([4, 1, 1, 1, 3, 1]), Int32Array.from([2, 1, 1, 4, 1, 2]), Int32Array.from([2, 1, 1, 2, 1, 4]), Int32Array.from([2, 1, 1, 2, 3, 2]), Int32Array.from([2, 3, 3, 1, 1, 1, 2])];\n  Code128Reader.MAX_AVG_VARIANCE = 0.25;\n  Code128Reader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n  Code128Reader.CODE_SHIFT = 98;\n  Code128Reader.CODE_CODE_C = 99;\n  Code128Reader.CODE_CODE_B = 100;\n  Code128Reader.CODE_CODE_A = 101;\n  Code128Reader.CODE_FNC_1 = 102;\n  Code128Reader.CODE_FNC_2 = 97;\n  Code128Reader.CODE_FNC_3 = 96;\n  Code128Reader.CODE_FNC_4_A = 101;\n  Code128Reader.CODE_FNC_4_B = 100;\n  Code128Reader.CODE_START_A = 103;\n  Code128Reader.CODE_START_B = 104;\n  Code128Reader.CODE_START_C = 105;\n  Code128Reader.CODE_STOP = 106;\n  return Code128Reader;\n}(OneDReader);\nexport default Code128Reader;","map":{"version":3,"names":["BarcodeFormat","ChecksumException","DecodeHintType","FormatException","NotFoundException","Result","ResultPoint","OneDReader","Code128Reader","_super","__extends","findStartPattern","row","width","getSize","rowOffset","getNextSet","counterPosition","counters","Int32Array","from","patternStart","isWhite","patternLength","i","get","bestVariance","MAX_AVG_VARIANCE","bestMatch","startCode","CODE_START_A","CODE_START_C","variance","patternMatchVariance","CODE_PATTERNS","MAX_INDIVIDUAL_VARIANCE","isRange","Math","max","slice","length","decodeCode","recordPattern","d","pattern","prototype","decodeRow","rowNumber","hints","convertFNC1","ASSUME_GS1","startPatternInfo","currentRawCodesIndex","rawCodes","Uint8Array","codeSet","CODE_CODE_A","CODE_START_B","CODE_CODE_B","CODE_CODE_C","done","isNextShifted","result","lastStart","nextStart","lastCode","code","checksumTotal","multiplier","lastCharacterWasPrintable","upperMode","shiftUpperMode","unshift","CODE_STOP","reduce","previous","current","String","fromCharCode","charCodeAt","CODE_FNC_1","CODE_FNC_2","CODE_FNC_3","CODE_FNC_4_A","CODE_SHIFT","CODE_FNC_4_B","lastPatternSize","getNextUnset","min","resultLength","substring","left","right","rawCodesSize","rawBytes","points","CODE_128","Date","getTime"],"sources":["../../../../src/core/oned/Code128Reader.ts"],"sourcesContent":[null],"mappings":"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AAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACnCD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CACvC;EAEUZ,aAAA,CAAAmB,gBAAgB,GAAG,IAAI;EACvBnB,aAAA,CAAA2B,uBAAuB,GAAG,GAAG;EAE7B3B,aAAA,CAAA4E,UAAU,GAAG,EAAE;EAEf5E,aAAA,CAAAmD,WAAW,GAAG,EAAE;EAChBnD,aAAA,CAAAkD,WAAW,GAAG,GAAG;EACjBlD,aAAA,CAAAgD,WAAW,GAAG,GAAG;EAEjBhD,aAAA,CAAAwE,UAAU,GAAG,GAAG;EAChBxE,aAAA,CAAAyE,UAAU,GAAG,EAAE;EACfzE,aAAA,CAAA0E,UAAU,GAAG,EAAE;EACf1E,aAAA,CAAA2E,YAAY,GAAG,GAAG;EAClB3E,aAAA,CAAA6E,YAAY,GAAG,GAAG;EAElB7E,aAAA,CAAAsB,YAAY,GAAG,GAAG;EAClBtB,aAAA,CAAAiD,YAAY,GAAG,GAAG;EAClBjD,aAAA,CAAAuB,YAAY,GAAG,GAAG;EAClBvB,aAAA,CAAAiE,SAAS,GAAG,GAAG;EA2WhC,OAAAjE,aAAC;CAAA,CA7e0CD,UAAU;eAAhCC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}