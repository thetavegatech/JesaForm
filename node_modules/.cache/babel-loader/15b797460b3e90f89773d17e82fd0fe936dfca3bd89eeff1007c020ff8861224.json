{"ast":null,"code":"/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport IllegalArgumentException from '../../IllegalArgumentException';\nexport var ModeValues;\n(function (ModeValues) {\n  ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n  ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n  ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n  ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n  ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n  ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n  ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n  ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n  ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n  ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n})(ModeValues || (ModeValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n * data can be encoded to bits in the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar Mode = /** @class */function () {\n  function Mode(value, stringValue, characterCountBitsForVersions, bits /*int*/) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.characterCountBitsForVersions = characterCountBitsForVersions;\n    this.bits = bits;\n    Mode.FOR_BITS.set(bits, this);\n    Mode.FOR_VALUE.set(value, this);\n  }\n  /**\n   * @param bits four bits encoding a QR Code data mode\n   * @return Mode encoded by these bits\n   * @throws IllegalArgumentException if bits do not correspond to a known mode\n   */\n  Mode.forBits = function (bits /*int*/) {\n    var mode = Mode.FOR_BITS.get(bits);\n    if (undefined === mode) {\n      throw new IllegalArgumentException();\n    }\n    return mode;\n  };\n  /**\n   * @param version version in question\n   * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n   *         count of characters that will follow encoded in this Mode\n   */\n  Mode.prototype.getCharacterCountBits = function (version) {\n    var versionNumber = version.getVersionNumber();\n    var offset;\n    if (versionNumber <= 9) {\n      offset = 0;\n    } else if (versionNumber <= 26) {\n      offset = 1;\n    } else {\n      offset = 2;\n    }\n    return this.characterCountBitsForVersions[offset];\n  };\n  Mode.prototype.getValue = function () {\n    return this.value;\n  };\n  Mode.prototype.getBits = function () {\n    return this.bits;\n  };\n  Mode.prototype.equals = function (o) {\n    if (!(o instanceof Mode)) {\n      return false;\n    }\n    var other = o;\n    return this.value === other.value;\n  };\n  Mode.prototype.toString = function () {\n    return this.stringValue;\n  };\n  Mode.FOR_BITS = new Map();\n  Mode.FOR_VALUE = new Map();\n  Mode.TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n  Mode.NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n  Mode.ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n  Mode.STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n  Mode.BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n  Mode.ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n  Mode.KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n  Mode.FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n  Mode.FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n  Mode.HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n  return Mode;\n}();\nexport default Mode;","map":{"version":3,"names":["IllegalArgumentException","ModeValues","Mode","value","stringValue","characterCountBitsForVersions","bits","FOR_BITS","set","FOR_VALUE","forBits","mode","get","undefined","prototype","getCharacterCountBits","version","versionNumber","getVersionNumber","offset","getValue","getBits","equals","o","other","toString","Map","TERMINATOR","Int32Array","from","NUMERIC","ALPHANUMERIC","STRUCTURED_APPEND","BYTE","ECI","KANJI","FNC1_FIRST_POSITION","FNC1_SECOND_POSITION","HANZI"],"sources":["../../../../../src/core/qrcode/decoder/Mode.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}