{"ast":null,"code":"/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Token from './Token';\nimport Integer from '../../util/Integer';\nvar SimpleToken = /** @class */function (_super) {\n  __extends(SimpleToken, _super);\n  function SimpleToken(previous, value, bitCount) {\n    var _this = _super.call(this, previous) || this;\n    _this.value = value;\n    _this.bitCount = bitCount;\n    return _this;\n  }\n  /**\n   * @Override\n   */\n  SimpleToken.prototype.appendTo = function (bitArray, text) {\n    bitArray.appendBits(this.value, this.bitCount);\n  };\n  SimpleToken.prototype.add = function (value, bitCount) {\n    return new SimpleToken(this, value, bitCount);\n  };\n  SimpleToken.prototype.addBinaryShift = function (start, byteCount) {\n    // no-op can't binary shift a simple token\n    console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');\n    return new SimpleToken(this, start, byteCount);\n  };\n  /**\n   * @Override\n   */\n  SimpleToken.prototype.toString = function () {\n    var value = this.value & (1 << this.bitCount) - 1;\n    value |= 1 << this.bitCount;\n    return '<' + Integer.toBinaryString(value | 1 << this.bitCount).substring(1) + '>';\n  };\n  return SimpleToken;\n}(Token);\nexport default SimpleToken;","map":{"version":3,"names":["Token","Integer","SimpleToken","_super","__extends","previous","value","bitCount","_this","call","prototype","appendTo","bitArray","text","appendBits","add","addBinaryShift","start","byteCount","console","warn","toString","toBinaryString","substring"],"sources":["../../../../../src/core/aztec/encoder/SimpleToken.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,oBAAoB;AAIxC,IAAAC,WAAA,0BAAAC,MAAA;EAAmDC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAMjD,SAAAD,YAAYG,QAAe,EAAEC,KAAU,EAAEC,QAAa;IAAtD,IAAAC,KAAA,GACEL,MAAA,CAAAM,IAAA,OAAMJ,QAAQ,CAAC;IACfG,KAAI,CAACF,KAAK,GAAUA,KAAK;IACzBE,KAAI,CAACD,QAAQ,GAAUA,QAAQ;;EACjC;EAEA;;;EAGAL,WAAA,CAAAQ,SAAA,CAAAC,QAAQ,GAAR,UAASC,QAAkB,EAAEC,IAA0B;IACrDD,QAAQ,CAACE,UAAU,CAAC,IAAI,CAACR,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC;EAChD,CAAC;EAEgBL,WAAA,CAAAQ,SAAA,CAAAK,GAAG,GAApB,UAAqBT,KAAU,EAAEC,QAAa;IAC5C,OAAO,IAAIL,WAAW,CAAC,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;EAC/C,CAAC;EAEgBL,WAAA,CAAAQ,SAAA,CAAAM,cAAc,GAA/B,UAAgCC,KAAU,EAAEC,SAAc;IACxD;IACAC,OAAO,CAACC,IAAI,CAAC,yEAAyE,CAAC;IACvF,OAAO,IAAIlB,WAAW,CAAC,IAAI,EAAEe,KAAK,EAAEC,SAAS,CAAC;EAChD,CAAC;EAED;;;EAGOhB,WAAA,CAAAQ,SAAA,CAAAW,QAAQ,GAAf;IACE,IAAIf,KAAK,GAAQ,IAAI,CAACA,KAAK,GAAI,CAAC,CAAC,IAAI,IAAI,CAACC,QAAQ,IAAI,CAAE;IACxDD,KAAK,IAAI,CAAC,IAAI,IAAI,CAACC,QAAQ;IAC3B,OAAO,GAAG,GAAGN,OAAO,CAACqB,cAAc,CAAChB,KAAK,GAAI,CAAC,IAAI,IAAI,CAACC,QAAS,CAAC,CAACgB,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG;EACtF,CAAC;EAEH,OAAArB,WAAC;AAAD,CAAC,CAtCkDF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}