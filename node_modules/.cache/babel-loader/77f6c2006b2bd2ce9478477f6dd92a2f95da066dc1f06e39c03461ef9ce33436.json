{"ast":null,"code":"/*\n* Copyright 2012 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// package com.google.zxing.pdf417.decoder.ec;\nimport IllegalArgumentException from '../../../IllegalArgumentException';\nimport System from '../../../util/System';\nimport StringBuilder from '../../../util/StringBuilder';\n/**\n * @author Sean Owen\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\n */\nvar ModulusPoly = /** @class */function () {\n  function ModulusPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException();\n    }\n    this.field = field;\n    var coefficientsLength = /*int*/coefficients.length;\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = /*int*/1;\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = new Int32Array([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n  ModulusPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\n   * @return degree of this polynomial\n   */\n  ModulusPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\n   * @return true iff this polynomial is the monomial \"0\"\n   */\n  ModulusPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\n   * @return coefficient of x^degree term in this polynomial\n   */\n  ModulusPoly.prototype.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\n   * @return evaluation of this polynomial at a given point\n   */\n  ModulusPoly.prototype.evaluateAt = function (a) {\n    var e_1, _a;\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    if (a === 1) {\n      // Just the sum of the coefficients\n      var sum = /*int*/0;\n      try {\n        for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var coefficient = _c.value /*int*/;\n          sum = this.field.add(sum, coefficient);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return sum;\n    }\n    var result = /*int*/this.coefficients[0];\n    var size = /*int*/this.coefficients.length;\n    for (var i /*int*/ = 1; i < size; i++) {\n      result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n    }\n    return result;\n  };\n  ModulusPoly.prototype.add = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero()) {\n      return other;\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = /*int*/largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new ModulusPoly(this.field, sumDiff);\n  };\n  ModulusPoly.prototype.subtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (other.isZero()) {\n      return this;\n    }\n    return this.add(other.negative());\n  };\n  ModulusPoly.prototype.multiply = function (other) {\n    if (other instanceof ModulusPoly) {\n      return this.multiplyOther(other);\n    }\n    return this.multiplyScalar(other);\n  };\n  ModulusPoly.prototype.multiplyOther = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException('ModulusPolys do not have same ModulusGF field');\n    }\n    if (this.isZero() || other.isZero()) {\n      // return this.field.getZero();\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = /*int*/aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = /*int*/bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    for (var i /*int*/ = 0; i < aLength; i++) {\n      var aCoeff = /*int*/aCoefficients[i];\n      for (var j /*int*/ = 0; j < bLength; j++) {\n        product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.negative = function () {\n    var size = /*int*/this.coefficients.length;\n    var negativeCoefficients = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n    }\n    return new ModulusPoly(this.field, negativeCoefficients);\n  };\n  ModulusPoly.prototype.multiplyScalar = function (scalar) {\n    if (scalar === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    if (scalar === 1) {\n      return this;\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException();\n    }\n    if (coefficient === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n    var size = /*int*/this.coefficients.length;\n    var product = new Int32Array(size + degree);\n    for (var i /*int*/ = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n    return new ModulusPoly(this.field, product);\n  };\n  /*\n  ModulusPoly[] divide(other: ModulusPoly) {\n    if (!field.equals(other.field)) {\n      throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n    }\n    if (other.isZero()) {\n      throw new IllegalArgumentException(\"Divide by 0\");\n    }\n       let quotient: ModulusPoly = field.getZero();\n    let remainder: ModulusPoly = this;\n       let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\n    let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\n       while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\n      let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\n      let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.add(iterationQuotient);\n      remainder = remainder.subtract(term);\n    }\n       return new ModulusPoly[] { quotient, remainder };\n  }\n  */\n  // @Override\n  ModulusPoly.prototype.toString = function () {\n    var result = new StringBuilder( /*8 * this.getDegree()*/); // dynamic string size in JS\n    for (var degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = /*int*/this.getCoefficient(degree);\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result.append(' - ');\n          coefficient = -coefficient;\n        } else {\n          if (result.length() > 0) {\n            result.append(' + ');\n          }\n        }\n        if (degree === 0 || coefficient !== 1) {\n          result.append(coefficient);\n        }\n        if (degree !== 0) {\n          if (degree === 1) {\n            result.append('x');\n          } else {\n            result.append('x^');\n            result.append(degree);\n          }\n        }\n      }\n    }\n    return result.toString();\n  };\n  return ModulusPoly;\n}();\nexport default ModulusPoly;","map":{"version":3,"names":["IllegalArgumentException","System","StringBuilder","ModulusPoly","field","coefficients","length","coefficientsLength","firstNonZero","Int32Array","arraycopy","prototype","getCoefficients","getDegree","isZero","getCoefficient","degree","evaluateAt","a","sum","_b","__values","_c","next","done","coefficient","value","add","result","size","i","multiply","other","equals","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","subtract","negative","multiplyOther","multiplyScalar","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","negativeCoefficients","scalar","multiplyByMonomial","toString","append"],"sources":["../../../../../../src/core/pdf417/decoder/ec/ModulusPoly.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}