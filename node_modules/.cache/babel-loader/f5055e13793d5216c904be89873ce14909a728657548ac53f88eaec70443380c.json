{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport BitArray from '../../common/BitArray';\nimport IllegalArgumentException from '../../IllegalArgumentException';\nimport StringUtils from '../../common/StringUtils';\nimport BitMatrix from '../../common/BitMatrix';\nimport AztecCode from './AztecCode';\nimport ReedSolomonEncoder from '../../common/reedsolomon/ReedSolomonEncoder';\nimport GenericGF from '../../common/reedsolomon/GenericGF';\nimport HighLevelEncoder from './HighLevelEncoder';\nimport Integer from '../../util/Integer';\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// package com.google.zxing.aztec.encoder;\n// import com.google.zxing.common.BitArray;\n// import com.google.zxing.common.BitMatrix;\n// import com.google.zxing.common.reedsolomon.GenericGF;\n// import com.google.zxing.common.reedsolomon.ReedSolomonEncoder;\n/**\n * Generates Aztec 2D barcodes.\n *\n * @author Rustam Abdullaev\n */\nvar Encoder = /** @class */function () {\n  function Encoder() {}\n  /**\n   * Encodes the given binary content as an Aztec symbol\n   *\n   * @param data input data string\n   * @return Aztec symbol matrix with metadata\n   */\n  Encoder.encodeBytes = function (data) {\n    return Encoder.encode(data, Encoder.DEFAULT_EC_PERCENT, Encoder.DEFAULT_AZTEC_LAYERS);\n  };\n  /**\n   * Encodes the given binary content as an Aztec symbol\n   *\n   * @param data input data string\n   * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n   *                      a minimum of 23% + 3 words is recommended)\n   * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n   * @return Aztec symbol matrix with metadata\n   */\n  Encoder.encode = function (data, minECCPercent, userSpecifiedLayers) {\n    // High-level encode\n    var bits = new HighLevelEncoder(data).encode();\n    // stuff bits and choose symbol size\n    var eccBits = Integer.truncDivision(bits.getSize() * minECCPercent, 100) + 11;\n    var totalSizeBits = bits.getSize() + eccBits;\n    var compact;\n    var layers;\n    var totalBitsInLayer;\n    var wordSize;\n    var stuffedBits;\n    if (userSpecifiedLayers !== Encoder.DEFAULT_AZTEC_LAYERS) {\n      compact = userSpecifiedLayers < 0;\n      layers = Math.abs(userSpecifiedLayers);\n      if (layers > (compact ? Encoder.MAX_NB_BITS_COMPACT : Encoder.MAX_NB_BITS)) {\n        throw new IllegalArgumentException(StringUtils.format('Illegal value %s for layers', userSpecifiedLayers));\n      }\n      totalBitsInLayer = Encoder.totalBitsInLayer(layers, compact);\n      wordSize = Encoder.WORD_SIZE[layers];\n      var usableBitsInLayers = totalBitsInLayer - totalBitsInLayer % wordSize;\n      stuffedBits = Encoder.stuffBits(bits, wordSize);\n      if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {\n        throw new IllegalArgumentException('Data to large for user specified layer');\n      }\n      if (compact && stuffedBits.getSize() > wordSize * 64) {\n        // Compact format only allows 64 data words, though C4 can hold more words than that\n        throw new IllegalArgumentException('Data to large for user specified layer');\n      }\n    } else {\n      wordSize = 0;\n      stuffedBits = null;\n      // We look at the possible table sizes in the order Compact1, Compact2, Compact3,\n      // Compact4, Normal4,...  Normal(i) for i < 4 isn't typically used since Compact(i+1)\n      // is the same size, but has more data.\n      for (var i /*int*/ = 0;; i++) {\n        if (i > Encoder.MAX_NB_BITS) {\n          throw new IllegalArgumentException('Data too large for an Aztec code');\n        }\n        compact = i <= 3;\n        layers = compact ? i + 1 : i;\n        totalBitsInLayer = Encoder.totalBitsInLayer(layers, compact);\n        if (totalSizeBits > totalBitsInLayer) {\n          continue;\n        }\n        // [Re]stuff the bits if this is the first opportunity, or if the\n        // wordSize has changed\n        if (stuffedBits == null || wordSize !== Encoder.WORD_SIZE[layers]) {\n          wordSize = Encoder.WORD_SIZE[layers];\n          stuffedBits = Encoder.stuffBits(bits, wordSize);\n        }\n        var usableBitsInLayers = totalBitsInLayer - totalBitsInLayer % wordSize;\n        if (compact && stuffedBits.getSize() > wordSize * 64) {\n          // Compact format only allows 64 data words, though C4 can hold more words than that\n          continue;\n        }\n        if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {\n          break;\n        }\n      }\n    }\n    var messageBits = Encoder.generateCheckWords(stuffedBits, totalBitsInLayer, wordSize);\n    // generate mode message\n    var messageSizeInWords = stuffedBits.getSize() / wordSize;\n    var modeMessage = Encoder.generateModeMessage(compact, layers, messageSizeInWords);\n    // allocate symbol\n    var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n    var alignmentMap = new Int32Array(baseMatrixSize);\n    var matrixSize;\n    if (compact) {\n      // no alignment marks in compact mode, alignmentMap is a no-op\n      matrixSize = baseMatrixSize;\n      for (var i /*int*/ = 0; i < alignmentMap.length; i++) {\n        alignmentMap[i] = i;\n      }\n    } else {\n      matrixSize = baseMatrixSize + 1 + 2 * Integer.truncDivision(Integer.truncDivision(baseMatrixSize, 2) - 1, 15);\n      var origCenter = Integer.truncDivision(baseMatrixSize, 2);\n      var center = Integer.truncDivision(matrixSize, 2);\n      for (var i /*int*/ = 0; i < origCenter; i++) {\n        var newOffset = i + Integer.truncDivision(i, 15);\n        alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n        alignmentMap[origCenter + i] = center + newOffset + 1;\n      }\n    }\n    var matrix = new BitMatrix(matrixSize);\n    // draw data bits\n    for (var i /*int*/ = 0, rowOffset = 0; i < layers; i++) {\n      var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n      for (var j /*int*/ = 0; j < rowSize; j++) {\n        var columnOffset = j * 2;\n        for (var k /*int*/ = 0; k < 2; k++) {\n          if (messageBits.get(rowOffset + columnOffset + k)) {\n            matrix.set(alignmentMap[i * 2 + k], alignmentMap[i * 2 + j]);\n          }\n          if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {\n            matrix.set(alignmentMap[i * 2 + j], alignmentMap[baseMatrixSize - 1 - i * 2 - k]);\n          }\n          if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {\n            matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k], alignmentMap[baseMatrixSize - 1 - i * 2 - j]);\n          }\n          if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {\n            matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j], alignmentMap[i * 2 + k]);\n          }\n        }\n      }\n      rowOffset += rowSize * 8;\n    }\n    // draw mode message\n    Encoder.drawModeMessage(matrix, compact, matrixSize, modeMessage);\n    // draw alignment marks\n    if (compact) {\n      Encoder.drawBullsEye(matrix, Integer.truncDivision(matrixSize, 2), 5);\n    } else {\n      Encoder.drawBullsEye(matrix, Integer.truncDivision(matrixSize, 2), 7);\n      for (var i /*int*/ = 0, j = 0; i < Integer.truncDivision(baseMatrixSize, 2) - 1; i += 15, j += 16) {\n        for (var k /*int*/ = Integer.truncDivision(matrixSize, 2) & 1; k < matrixSize; k += 2) {\n          matrix.set(Integer.truncDivision(matrixSize, 2) - j, k);\n          matrix.set(Integer.truncDivision(matrixSize, 2) + j, k);\n          matrix.set(k, Integer.truncDivision(matrixSize, 2) - j);\n          matrix.set(k, Integer.truncDivision(matrixSize, 2) + j);\n        }\n      }\n    }\n    var aztec = new AztecCode();\n    aztec.setCompact(compact);\n    aztec.setSize(matrixSize);\n    aztec.setLayers(layers);\n    aztec.setCodeWords(messageSizeInWords);\n    aztec.setMatrix(matrix);\n    return aztec;\n  };\n  Encoder.drawBullsEye = function (matrix, center, size) {\n    for (var i /*int*/ = 0; i < size; i += 2) {\n      for (var j /*int*/ = center - i; j <= center + i; j++) {\n        matrix.set(j, center - i);\n        matrix.set(j, center + i);\n        matrix.set(center - i, j);\n        matrix.set(center + i, j);\n      }\n    }\n    matrix.set(center - size, center - size);\n    matrix.set(center - size + 1, center - size);\n    matrix.set(center - size, center - size + 1);\n    matrix.set(center + size, center - size);\n    matrix.set(center + size, center - size + 1);\n    matrix.set(center + size, center + size - 1);\n  };\n  Encoder.generateModeMessage = function (compact, layers, messageSizeInWords) {\n    var modeMessage = new BitArray();\n    if (compact) {\n      modeMessage.appendBits(layers - 1, 2);\n      modeMessage.appendBits(messageSizeInWords - 1, 6);\n      modeMessage = Encoder.generateCheckWords(modeMessage, 28, 4);\n    } else {\n      modeMessage.appendBits(layers - 1, 5);\n      modeMessage.appendBits(messageSizeInWords - 1, 11);\n      modeMessage = Encoder.generateCheckWords(modeMessage, 40, 4);\n    }\n    return modeMessage;\n  };\n  Encoder.drawModeMessage = function (matrix, compact, matrixSize, modeMessage) {\n    var center = Integer.truncDivision(matrixSize, 2);\n    if (compact) {\n      for (var i /*int*/ = 0; i < 7; i++) {\n        var offset = center - 3 + i;\n        if (modeMessage.get(i)) {\n          matrix.set(offset, center - 5);\n        }\n        if (modeMessage.get(i + 7)) {\n          matrix.set(center + 5, offset);\n        }\n        if (modeMessage.get(20 - i)) {\n          matrix.set(offset, center + 5);\n        }\n        if (modeMessage.get(27 - i)) {\n          matrix.set(center - 5, offset);\n        }\n      }\n    } else {\n      for (var i /*int*/ = 0; i < 10; i++) {\n        var offset = center - 5 + i + Integer.truncDivision(i, 5);\n        if (modeMessage.get(i)) {\n          matrix.set(offset, center - 7);\n        }\n        if (modeMessage.get(i + 10)) {\n          matrix.set(center + 7, offset);\n        }\n        if (modeMessage.get(29 - i)) {\n          matrix.set(offset, center + 7);\n        }\n        if (modeMessage.get(39 - i)) {\n          matrix.set(center - 7, offset);\n        }\n      }\n    }\n  };\n  Encoder.generateCheckWords = function (bitArray, totalBits, wordSize) {\n    var e_1, _a;\n    // bitArray is guaranteed to be a multiple of the wordSize, so no padding needed\n    var messageSizeInWords = bitArray.getSize() / wordSize;\n    var rs = new ReedSolomonEncoder(Encoder.getGF(wordSize));\n    var totalWords = Integer.truncDivision(totalBits, wordSize);\n    var messageWords = Encoder.bitsToWords(bitArray, wordSize, totalWords);\n    rs.encode(messageWords, totalWords - messageSizeInWords);\n    var startPad = totalBits % wordSize;\n    var messageBits = new BitArray();\n    messageBits.appendBits(0, startPad);\n    try {\n      for (var _b = __values(Array.from(messageWords)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var messageWord = _c.value /*: int*/;\n        messageBits.appendBits(messageWord, wordSize);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return messageBits;\n  };\n  Encoder.bitsToWords = function (stuffedBits, wordSize, totalWords) {\n    var message = new Int32Array(totalWords);\n    var i;\n    var n;\n    for (i = 0, n = stuffedBits.getSize() / wordSize; i < n; i++) {\n      var value = 0;\n      for (var j /*int*/ = 0; j < wordSize; j++) {\n        value |= stuffedBits.get(i * wordSize + j) ? 1 << wordSize - j - 1 : 0;\n      }\n      message[i] = value;\n    }\n    return message;\n  };\n  Encoder.getGF = function (wordSize) {\n    switch (wordSize) {\n      case 4:\n        return GenericGF.AZTEC_PARAM;\n      case 6:\n        return GenericGF.AZTEC_DATA_6;\n      case 8:\n        return GenericGF.AZTEC_DATA_8;\n      case 10:\n        return GenericGF.AZTEC_DATA_10;\n      case 12:\n        return GenericGF.AZTEC_DATA_12;\n      default:\n        throw new IllegalArgumentException('Unsupported word size ' + wordSize);\n    }\n  };\n  Encoder.stuffBits = function (bits, wordSize) {\n    var out = new BitArray();\n    var n = bits.getSize();\n    var mask = (1 << wordSize) - 2;\n    for (var i /*int*/ = 0; i < n; i += wordSize) {\n      var word = 0;\n      for (var j /*int*/ = 0; j < wordSize; j++) {\n        if (i + j >= n || bits.get(i + j)) {\n          word |= 1 << wordSize - 1 - j;\n        }\n      }\n      if ((word & mask) === mask) {\n        out.appendBits(word & mask, wordSize);\n        i--;\n      } else if ((word & mask) === 0) {\n        out.appendBits(word | 1, wordSize);\n        i--;\n      } else {\n        out.appendBits(word, wordSize);\n      }\n    }\n    return out;\n  };\n  Encoder.totalBitsInLayer = function (layers, compact) {\n    return ((compact ? 88 : 112) + 16 * layers) * layers;\n  };\n  Encoder.DEFAULT_EC_PERCENT = 33; // default minimal percentage of error check words\n  Encoder.DEFAULT_AZTEC_LAYERS = 0;\n  Encoder.MAX_NB_BITS = 32;\n  Encoder.MAX_NB_BITS_COMPACT = 4;\n  Encoder.WORD_SIZE = Int32Array.from([4, 6, 6, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]);\n  return Encoder;\n}();\nexport default Encoder;","map":{"version":3,"names":["BitArray","IllegalArgumentException","StringUtils","BitMatrix","AztecCode","ReedSolomonEncoder","GenericGF","HighLevelEncoder","Integer","Encoder","encodeBytes","data","encode","DEFAULT_EC_PERCENT","DEFAULT_AZTEC_LAYERS","minECCPercent","userSpecifiedLayers","bits","eccBits","truncDivision","getSize","totalSizeBits","compact","layers","totalBitsInLayer","wordSize","stuffedBits","Math","abs","MAX_NB_BITS_COMPACT","MAX_NB_BITS","format","WORD_SIZE","usableBitsInLayers","stuffBits","i","messageBits","generateCheckWords","messageSizeInWords","modeMessage","generateModeMessage","baseMatrixSize","alignmentMap","Int32Array","matrixSize","length","origCenter","center","newOffset","matrix","rowOffset","rowSize","j","columnOffset","k","get","set","drawModeMessage","drawBullsEye","aztec","setCompact","setSize","setLayers","setCodeWords","setMatrix","size","appendBits","offset","bitArray","totalBits","rs","getGF","totalWords","messageWords","bitsToWords","startPad","_b","__values","Array","from","_c","next","done","messageWord","value","message","n","AZTEC_PARAM","AZTEC_DATA_6","AZTEC_DATA_8","AZTEC_DATA_10","AZTEC_DATA_12","out","mask","word"],"sources":["../../../../../src/core/aztec/encoder/Encoder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}