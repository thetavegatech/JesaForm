{"ast":null,"code":"/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing.common {*/\nimport Binarizer from '../Binarizer';\nimport BitArray from './BitArray';\nimport BitMatrix from './BitMatrix';\nimport NotFoundException from '../NotFoundException';\n/**\n * This Binarizer implementation uses the old ZXing global histogram approach. It is suitable\n * for low-end mobile devices which don't have enough CPU or memory to use a local thresholding\n * algorithm. However, because it picks a global black point, it cannot handle difficult shadows\n * and gradients.\n *\n * Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Sean Owen\n */\nvar GlobalHistogramBinarizer = /** @class */function (_super) {\n  __extends(GlobalHistogramBinarizer, _super);\n  function GlobalHistogramBinarizer(source) {\n    var _this = _super.call(this, source) || this;\n    _this.luminances = GlobalHistogramBinarizer.EMPTY;\n    _this.buckets = new Int32Array(GlobalHistogramBinarizer.LUMINANCE_BUCKETS);\n    return _this;\n  }\n  // Applies simple sharpening to the row data to improve performance of the 1D Readers.\n  /*@Override*/\n  GlobalHistogramBinarizer.prototype.getBlackRow = function (y /*int*/, row) {\n    var source = this.getLuminanceSource();\n    var width = source.getWidth();\n    if (row === undefined || row === null || row.getSize() < width) {\n      row = new BitArray(width);\n    } else {\n      row.clear();\n    }\n    this.initArrays(width);\n    var localLuminances = source.getRow(y, this.luminances);\n    var localBuckets = this.buckets;\n    for (var x = 0; x < width; x++) {\n      localBuckets[(localLuminances[x] & 0xff) >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n    }\n    var blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n    if (width < 3) {\n      // Special case for very small images\n      for (var x = 0; x < width; x++) {\n        if ((localLuminances[x] & 0xff) < blackPoint) {\n          row.set(x);\n        }\n      }\n    } else {\n      var left = localLuminances[0] & 0xff;\n      var center = localLuminances[1] & 0xff;\n      for (var x = 1; x < width - 1; x++) {\n        var right = localLuminances[x + 1] & 0xff;\n        // A simple -1 4 -1 box filter with a weight of 2.\n        if ((center * 4 - left - right) / 2 < blackPoint) {\n          row.set(x);\n        }\n        left = center;\n        center = right;\n      }\n    }\n    return row;\n  };\n  // Does not sharpen the data, as this call is intended to only be used by 2D Readers.\n  /*@Override*/\n  GlobalHistogramBinarizer.prototype.getBlackMatrix = function () {\n    var source = this.getLuminanceSource();\n    var width = source.getWidth();\n    var height = source.getHeight();\n    var matrix = new BitMatrix(width, height);\n    // Quickly calculates the histogram by sampling four rows from the image. This proved to be\n    // more robust on the blackbox tests than sampling a diagonal as we used to do.\n    this.initArrays(width);\n    var localBuckets = this.buckets;\n    for (var y = 1; y < 5; y++) {\n      var row = Math.floor(height * y / 5);\n      var localLuminances_1 = source.getRow(row, this.luminances);\n      var right = Math.floor(width * 4 / 5);\n      for (var x = Math.floor(width / 5); x < right; x++) {\n        var pixel = localLuminances_1[x] & 0xff;\n        localBuckets[pixel >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n      }\n    }\n    var blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n    // We delay reading the entire image luminance until the black point estimation succeeds.\n    // Although we end up reading four rows twice, it is consistent with our motto of\n    // \"fail quickly\" which is necessary for continuous scanning.\n    var localLuminances = source.getMatrix();\n    for (var y = 0; y < height; y++) {\n      var offset = y * width;\n      for (var x = 0; x < width; x++) {\n        var pixel = localLuminances[offset + x] & 0xff;\n        if (pixel < blackPoint) {\n          matrix.set(x, y);\n        }\n      }\n    }\n    return matrix;\n  };\n  /*@Override*/\n  GlobalHistogramBinarizer.prototype.createBinarizer = function (source) {\n    return new GlobalHistogramBinarizer(source);\n  };\n  GlobalHistogramBinarizer.prototype.initArrays = function (luminanceSize /*int*/) {\n    if (this.luminances.length < luminanceSize) {\n      this.luminances = new Uint8ClampedArray(luminanceSize);\n    }\n    var buckets = this.buckets;\n    for (var x = 0; x < GlobalHistogramBinarizer.LUMINANCE_BUCKETS; x++) {\n      buckets[x] = 0;\n    }\n  };\n  GlobalHistogramBinarizer.estimateBlackPoint = function (buckets) {\n    // Find the tallest peak in the histogram.\n    var numBuckets = buckets.length;\n    var maxBucketCount = 0;\n    var firstPeak = 0;\n    var firstPeakSize = 0;\n    for (var x = 0; x < numBuckets; x++) {\n      if (buckets[x] > firstPeakSize) {\n        firstPeak = x;\n        firstPeakSize = buckets[x];\n      }\n      if (buckets[x] > maxBucketCount) {\n        maxBucketCount = buckets[x];\n      }\n    }\n    // Find the second-tallest peak which is somewhat far from the tallest peak.\n    var secondPeak = 0;\n    var secondPeakScore = 0;\n    for (var x = 0; x < numBuckets; x++) {\n      var distanceToBiggest = x - firstPeak;\n      // Encourage more distant second peaks by multiplying by square of distance.\n      var score = buckets[x] * distanceToBiggest * distanceToBiggest;\n      if (score > secondPeakScore) {\n        secondPeak = x;\n        secondPeakScore = score;\n      }\n    }\n    // Make sure firstPeak corresponds to the black peak.\n    if (firstPeak > secondPeak) {\n      var temp = firstPeak;\n      firstPeak = secondPeak;\n      secondPeak = temp;\n    }\n    // If there is too little contrast in the image to pick a meaningful black point, throw rather\n    // than waste time trying to decode the image, and risk false positives.\n    if (secondPeak - firstPeak <= numBuckets / 16) {\n      throw new NotFoundException();\n    }\n    // Find a valley between them that is low and closer to the white peak.\n    var bestValley = secondPeak - 1;\n    var bestValleyScore = -1;\n    for (var x = secondPeak - 1; x > firstPeak; x--) {\n      var fromFirst = x - firstPeak;\n      var score = fromFirst * fromFirst * (secondPeak - x) * (maxBucketCount - buckets[x]);\n      if (score > bestValleyScore) {\n        bestValley = x;\n        bestValleyScore = score;\n      }\n    }\n    return bestValley << GlobalHistogramBinarizer.LUMINANCE_SHIFT;\n  };\n  GlobalHistogramBinarizer.LUMINANCE_BITS = 5;\n  GlobalHistogramBinarizer.LUMINANCE_SHIFT = 8 - GlobalHistogramBinarizer.LUMINANCE_BITS;\n  GlobalHistogramBinarizer.LUMINANCE_BUCKETS = 1 << GlobalHistogramBinarizer.LUMINANCE_BITS;\n  GlobalHistogramBinarizer.EMPTY = Uint8ClampedArray.from([0]);\n  return GlobalHistogramBinarizer;\n}(Binarizer);\nexport default GlobalHistogramBinarizer;","map":{"version":3,"names":["Binarizer","BitArray","BitMatrix","NotFoundException","GlobalHistogramBinarizer","_super","__extends","source","_this","call","luminances","EMPTY","buckets","Int32Array","LUMINANCE_BUCKETS","prototype","getBlackRow","y","row","getLuminanceSource","width","getWidth","undefined","getSize","clear","initArrays","localLuminances","getRow","localBuckets","x","LUMINANCE_SHIFT","blackPoint","estimateBlackPoint","set","left","center","right","getBlackMatrix","height","getHeight","matrix","Math","floor","localLuminances_1","pixel","getMatrix","offset","createBinarizer","luminanceSize","length","Uint8ClampedArray","numBuckets","maxBucketCount","firstPeak","firstPeakSize","secondPeak","secondPeakScore","distanceToBiggest","score","temp","bestValley","bestValleyScore","fromFirst","LUMINANCE_BITS","from"],"sources":["../../../../src/core/common/GlobalHistogramBinarizer.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}