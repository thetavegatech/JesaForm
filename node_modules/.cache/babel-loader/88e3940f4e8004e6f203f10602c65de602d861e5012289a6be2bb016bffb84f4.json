{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*namespace com.google.zxing.qrcode.encoder {*/\nimport EncodeHintType from '../../EncodeHintType';\nimport BitArray from '../../common/BitArray';\nimport CharacterSetECI from '../../common/CharacterSetECI';\nimport GenericGF from '../../common/reedsolomon/GenericGF';\nimport ReedSolomonEncoder from '../../common/reedsolomon/ReedSolomonEncoder';\nimport Mode from '../decoder/Mode';\nimport Version from '../decoder/Version';\nimport MaskUtil from './MaskUtil';\nimport ByteMatrix from './ByteMatrix';\nimport QRCode from './QRCode';\nimport MatrixUtil from './MatrixUtil';\nimport StringEncoding from '../../util/StringEncoding';\nimport BlockPair from './BlockPair';\nimport WriterException from '../../WriterException';\n/*import java.io.UnsupportedEncodingException;*/\n/*import java.util.ArrayList;*/\n/*import java.util.Collection;*/\n/*import java.util.Map;*/\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\nvar Encoder = /** @class */function () {\n  // TYPESCRIPTPORT: changed to UTF8, the default for js\n  function Encoder() {}\n  // The mask penalty calculation is complicated.  See Table 21 of JISX0510:2004 (p.45) for details.\n  // Basically it applies four rules and summate all penalties.\n  Encoder.calculateMaskPenalty = function (matrix) {\n    return MaskUtil.applyMaskPenaltyRule1(matrix) + MaskUtil.applyMaskPenaltyRule2(matrix) + MaskUtil.applyMaskPenaltyRule3(matrix) + MaskUtil.applyMaskPenaltyRule4(matrix);\n  };\n  /**\n   * @param content text to encode\n   * @param ecLevel error correction level to use\n   * @return {@link QRCode} representing the encoded QR code\n   * @throws WriterException if encoding can't succeed, because of for example invalid content\n   *   or configuration\n   */\n  // public static encode(content: string, ecLevel: ErrorCorrectionLevel): QRCode /*throws WriterException*/ {\n  //   return encode(content, ecLevel, null)\n  // }\n  Encoder.encode = function (content, ecLevel, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    // Determine what character encoding has been specified by the caller, if any\n    var encoding = Encoder.DEFAULT_BYTE_MODE_ENCODING;\n    var hasEncodingHint = hints !== null && undefined !== hints.get(EncodeHintType.CHARACTER_SET);\n    if (hasEncodingHint) {\n      encoding = hints.get(EncodeHintType.CHARACTER_SET).toString();\n    }\n    // Pick an encoding mode appropriate for the content. Note that this will not attempt to use\n    // multiple modes / segments even if that were more efficient. Twould be nice.\n    var mode = this.chooseMode(content, encoding);\n    // This will store the header information, like mode and\n    // length, as well as \"header\" segments like an ECI segment.\n    var headerBits = new BitArray();\n    // Append ECI segment if applicable\n    if (mode === Mode.BYTE && (hasEncodingHint || Encoder.DEFAULT_BYTE_MODE_ENCODING !== encoding)) {\n      var eci = CharacterSetECI.getCharacterSetECIByName(encoding);\n      if (eci !== undefined) {\n        this.appendECI(eci, headerBits);\n      }\n    }\n    // (With ECI in place,) Write the mode marker\n    this.appendModeInfo(mode, headerBits);\n    // Collect data within the main segment, separately, to count its size if needed. Don't add it to\n    // main payload yet.\n    var dataBits = new BitArray();\n    this.appendBytes(content, mode, dataBits, encoding);\n    var version;\n    if (hints !== null && undefined !== hints.get(EncodeHintType.QR_VERSION)) {\n      var versionNumber = Number.parseInt(hints.get(EncodeHintType.QR_VERSION).toString(), 10);\n      version = Version.getVersionForNumber(versionNumber);\n      var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, version);\n      if (!this.willFit(bitsNeeded, version, ecLevel)) {\n        throw new WriterException('Data too big for requested version');\n      }\n    } else {\n      version = this.recommendVersion(ecLevel, mode, headerBits, dataBits);\n    }\n    var headerAndDataBits = new BitArray();\n    headerAndDataBits.appendBitArray(headerBits);\n    // Find \"length\" of main segment and write it\n    var numLetters = mode === Mode.BYTE ? dataBits.getSizeInBytes() : content.length;\n    this.appendLengthInfo(numLetters, version, mode, headerAndDataBits);\n    // Put data together into the overall payload\n    headerAndDataBits.appendBitArray(dataBits);\n    var ecBlocks = version.getECBlocksForLevel(ecLevel);\n    var numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();\n    // Terminate the bits properly.\n    this.terminateBits(numDataBytes, headerAndDataBits);\n    // Interleave data bits with error correction code.\n    var finalBits = this.interleaveWithECBytes(headerAndDataBits, version.getTotalCodewords(), numDataBytes, ecBlocks.getNumBlocks());\n    var qrCode = new QRCode();\n    qrCode.setECLevel(ecLevel);\n    qrCode.setMode(mode);\n    qrCode.setVersion(version);\n    //  Choose the mask pattern and set to \"qrCode\".\n    var dimension = version.getDimensionForVersion();\n    var matrix = new ByteMatrix(dimension, dimension);\n    var maskPattern = this.chooseMaskPattern(finalBits, ecLevel, version, matrix);\n    qrCode.setMaskPattern(maskPattern);\n    // Build the matrix and set it to \"qrCode\".\n    MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);\n    qrCode.setMatrix(matrix);\n    return qrCode;\n  };\n  /**\n   * Decides the smallest version of QR code that will contain all of the provided data.\n   *\n   * @throws WriterException if the data cannot fit in any version\n   */\n  Encoder.recommendVersion = function (ecLevel, mode, headerBits, dataBits) {\n    // Hard part: need to know version to know how many bits length takes. But need to know how many\n    // bits it takes to know version. First we take a guess at version by assuming version will be\n    // the minimum, 1:\n    var provisionalBitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, Version.getVersionForNumber(1));\n    var provisionalVersion = this.chooseVersion(provisionalBitsNeeded, ecLevel);\n    // Use that guess to calculate the right version. I am still not sure this works in 100% of cases.\n    var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, provisionalVersion);\n    return this.chooseVersion(bitsNeeded, ecLevel);\n  };\n  Encoder.calculateBitsNeeded = function (mode, headerBits, dataBits, version) {\n    return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();\n  };\n  /**\n   * @return the code point of the table used in alphanumeric mode or\n   *  -1 if there is no corresponding code in the table.\n   */\n  Encoder.getAlphanumericCode = function (code /*int*/) {\n    if (code < Encoder.ALPHANUMERIC_TABLE.length) {\n      return Encoder.ALPHANUMERIC_TABLE[code];\n    }\n    return -1;\n  };\n  // public static chooseMode(content: string): Mode {\n  //   return chooseMode(content, null);\n  // }\n  /**\n   * Choose the best mode by examining the content. Note that 'encoding' is used as a hint;\n   * if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.\n   */\n  Encoder.chooseMode = function (content, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    }\n    if (CharacterSetECI.SJIS.getName() === encoding && this.isOnlyDoubleByteKanji(content)) {\n      // Choose Kanji mode if all input are double-byte characters\n      return Mode.KANJI;\n    }\n    var hasNumeric = false;\n    var hasAlphanumeric = false;\n    for (var i = 0, length_1 = content.length; i < length_1; ++i) {\n      var c = content.charAt(i);\n      if (Encoder.isDigit(c)) {\n        hasNumeric = true;\n      } else if (this.getAlphanumericCode(c.charCodeAt(0)) !== -1) {\n        hasAlphanumeric = true;\n      } else {\n        return Mode.BYTE;\n      }\n    }\n    if (hasAlphanumeric) {\n      return Mode.ALPHANUMERIC;\n    }\n    if (hasNumeric) {\n      return Mode.NUMERIC;\n    }\n    return Mode.BYTE;\n  };\n  Encoder.isOnlyDoubleByteKanji = function (content) {\n    var bytes;\n    try {\n      bytes = StringEncoding.encode(content, CharacterSetECI.SJIS); // content.getBytes(\"Shift_JIS\"))\n    } catch (ignored /*: UnsupportedEncodingException*/) {\n      return false;\n    }\n    var length = bytes.length;\n    if (length % 2 !== 0) {\n      return false;\n    }\n    for (var i = 0; i < length; i += 2) {\n      var byte1 = bytes[i] & 0xFF;\n      if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Encoder.chooseMaskPattern = function (bits, ecLevel, version, matrix) {\n    var minPenalty = Number.MAX_SAFE_INTEGER; // Lower penalty is better.\n    var bestMaskPattern = -1;\n    // We try all mask patterns to choose the best one.\n    for (var maskPattern = 0; maskPattern < QRCode.NUM_MASK_PATTERNS; maskPattern++) {\n      MatrixUtil.buildMatrix(bits, ecLevel, version, maskPattern, matrix);\n      var penalty = this.calculateMaskPenalty(matrix);\n      if (penalty < minPenalty) {\n        minPenalty = penalty;\n        bestMaskPattern = maskPattern;\n      }\n    }\n    return bestMaskPattern;\n  };\n  Encoder.chooseVersion = function (numInputBits /*int*/, ecLevel) {\n    for (var versionNum = 1; versionNum <= 40; versionNum++) {\n      var version = Version.getVersionForNumber(versionNum);\n      if (Encoder.willFit(numInputBits, version, ecLevel)) {\n        return version;\n      }\n    }\n    throw new WriterException('Data too big');\n  };\n  /**\n   * @return true if the number of input bits will fit in a code with the specified version and\n   * error correction level.\n   */\n  Encoder.willFit = function (numInputBits /*int*/, version, ecLevel) {\n    // In the following comments, we use numbers of Version 7-H.\n    // numBytes = 196\n    var numBytes = version.getTotalCodewords();\n    // getNumECBytes = 130\n    var ecBlocks = version.getECBlocksForLevel(ecLevel);\n    var numEcBytes = ecBlocks.getTotalECCodewords();\n    // getNumDataBytes = 196 - 130 = 66\n    var numDataBytes = numBytes - numEcBytes;\n    var totalInputBytes = (numInputBits + 7) / 8;\n    return numDataBytes >= totalInputBytes;\n  };\n  /**\n   * Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).\n   */\n  Encoder.terminateBits = function (numDataBytes /*int*/, bits) {\n    var capacity = numDataBytes * 8;\n    if (bits.getSize() > capacity) {\n      throw new WriterException('data bits cannot fit in the QR Code' + bits.getSize() + ' > ' + capacity);\n    }\n    for (var i = 0; i < 4 && bits.getSize() < capacity; ++i) {\n      bits.appendBit(false);\n    }\n    // Append termination bits. See 8.4.8 of JISX0510:2004 (p.24) for details.\n    // If the last byte isn't 8-bit aligned, we'll add padding bits.\n    var numBitsInLastByte = bits.getSize() & 0x07;\n    if (numBitsInLastByte > 0) {\n      for (var i = numBitsInLastByte; i < 8; i++) {\n        bits.appendBit(false);\n      }\n    }\n    // If we have more space, we'll fill the space with padding patterns defined in 8.4.9 (p.24).\n    var numPaddingBytes = numDataBytes - bits.getSizeInBytes();\n    for (var i = 0; i < numPaddingBytes; ++i) {\n      bits.appendBits((i & 0x01) === 0 ? 0xEC : 0x11, 8);\n    }\n    if (bits.getSize() !== capacity) {\n      throw new WriterException('Bits size does not equal capacity');\n    }\n  };\n  /**\n   * Get number of data bytes and number of error correction bytes for block id \"blockID\". Store\n   * the result in \"numDataBytesInBlock\", and \"numECBytesInBlock\". See table 12 in 8.5.1 of\n   * JISX0510:2004 (p.30)\n   */\n  Encoder.getNumDataBytesAndNumECBytesForBlockID = function (numTotalBytes /*int*/, numDataBytes /*int*/, numRSBlocks /*int*/, blockID /*int*/, numDataBytesInBlock, numECBytesInBlock) {\n    if (blockID >= numRSBlocks) {\n      throw new WriterException('Block ID too large');\n    }\n    // numRsBlocksInGroup2 = 196 % 5 = 1\n    var numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;\n    // numRsBlocksInGroup1 = 5 - 1 = 4\n    var numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;\n    // numTotalBytesInGroup1 = 196 / 5 = 39\n    var numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks);\n    // numTotalBytesInGroup2 = 39 + 1 = 40\n    var numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;\n    // numDataBytesInGroup1 = 66 / 5 = 13\n    var numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks);\n    // numDataBytesInGroup2 = 13 + 1 = 14\n    var numDataBytesInGroup2 = numDataBytesInGroup1 + 1;\n    // numEcBytesInGroup1 = 39 - 13 = 26\n    var numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;\n    // numEcBytesInGroup2 = 40 - 14 = 26\n    var numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;\n    // Sanity checks.\n    // 26 = 26\n    if (numEcBytesInGroup1 !== numEcBytesInGroup2) {\n      throw new WriterException('EC bytes mismatch');\n    }\n    // 5 = 4 + 1.\n    if (numRSBlocks !== numRsBlocksInGroup1 + numRsBlocksInGroup2) {\n      throw new WriterException('RS blocks mismatch');\n    }\n    // 196 = (13 + 26) * 4 + (14 + 26) * 1\n    if (numTotalBytes !== (numDataBytesInGroup1 + numEcBytesInGroup1) * numRsBlocksInGroup1 + (numDataBytesInGroup2 + numEcBytesInGroup2) * numRsBlocksInGroup2) {\n      throw new WriterException('Total bytes mismatch');\n    }\n    if (blockID < numRsBlocksInGroup1) {\n      numDataBytesInBlock[0] = numDataBytesInGroup1;\n      numECBytesInBlock[0] = numEcBytesInGroup1;\n    } else {\n      numDataBytesInBlock[0] = numDataBytesInGroup2;\n      numECBytesInBlock[0] = numEcBytesInGroup2;\n    }\n  };\n  /**\n   * Interleave \"bits\" with corresponding error correction bytes. On success, store the result in\n   * \"result\". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.\n   */\n  Encoder.interleaveWithECBytes = function (bits, numTotalBytes /*int*/, numDataBytes /*int*/, numRSBlocks /*int*/) {\n    var e_1, _a, e_2, _b;\n    // \"bits\" must have \"getNumDataBytes\" bytes of data.\n    if (bits.getSizeInBytes() !== numDataBytes) {\n      throw new WriterException('Number of bits and data bytes does not match');\n    }\n    // Step 1.  Divide data bytes into blocks and generate error correction bytes for them. We'll\n    // store the divided data bytes blocks and error correction bytes blocks into \"blocks\".\n    var dataBytesOffset = 0;\n    var maxNumDataBytes = 0;\n    var maxNumEcBytes = 0;\n    // Since, we know the number of reedsolmon blocks, we can initialize the vector with the number.\n    var blocks = new Array(); // new Array<BlockPair>(numRSBlocks)\n    for (var i = 0; i < numRSBlocks; ++i) {\n      var numDataBytesInBlock = new Int32Array(1);\n      var numEcBytesInBlock = new Int32Array(1);\n      Encoder.getNumDataBytesAndNumECBytesForBlockID(numTotalBytes, numDataBytes, numRSBlocks, i, numDataBytesInBlock, numEcBytesInBlock);\n      var size = numDataBytesInBlock[0];\n      var dataBytes = new Uint8Array(size);\n      bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);\n      var ecBytes = Encoder.generateECBytes(dataBytes, numEcBytesInBlock[0]);\n      blocks.push(new BlockPair(dataBytes, ecBytes));\n      maxNumDataBytes = Math.max(maxNumDataBytes, size);\n      maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);\n      dataBytesOffset += numDataBytesInBlock[0];\n    }\n    if (numDataBytes !== dataBytesOffset) {\n      throw new WriterException('Data bytes does not match offset');\n    }\n    var result = new BitArray();\n    // First, place data blocks.\n    for (var i = 0; i < maxNumDataBytes; ++i) {\n      try {\n        for (var blocks_1 = (e_1 = void 0, __values(blocks)), blocks_1_1 = blocks_1.next(); !blocks_1_1.done; blocks_1_1 = blocks_1.next()) {\n          var block = blocks_1_1.value;\n          var dataBytes = block.getDataBytes();\n          if (i < dataBytes.length) {\n            result.appendBits(dataBytes[i], 8);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (blocks_1_1 && !blocks_1_1.done && (_a = blocks_1.return)) _a.call(blocks_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    // Then, place error correction blocks.\n    for (var i = 0; i < maxNumEcBytes; ++i) {\n      try {\n        for (var blocks_2 = (e_2 = void 0, __values(blocks)), blocks_2_1 = blocks_2.next(); !blocks_2_1.done; blocks_2_1 = blocks_2.next()) {\n          var block = blocks_2_1.value;\n          var ecBytes = block.getErrorCorrectionBytes();\n          if (i < ecBytes.length) {\n            result.appendBits(ecBytes[i], 8);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (blocks_2_1 && !blocks_2_1.done && (_b = blocks_2.return)) _b.call(blocks_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    if (numTotalBytes !== result.getSizeInBytes()) {\n      // Should be same.\n      throw new WriterException('Interleaving error: ' + numTotalBytes + ' and ' + result.getSizeInBytes() + ' differ.');\n    }\n    return result;\n  };\n  Encoder.generateECBytes = function (dataBytes, numEcBytesInBlock /*int*/) {\n    var numDataBytes = dataBytes.length;\n    var toEncode = new Int32Array(numDataBytes + numEcBytesInBlock); // int[numDataBytes + numEcBytesInBlock]\n    for (var i = 0; i < numDataBytes; i++) {\n      toEncode[i] = dataBytes[i] & 0xFF;\n    }\n    new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256).encode(toEncode, numEcBytesInBlock);\n    var ecBytes = new Uint8Array(numEcBytesInBlock);\n    for (var i = 0; i < numEcBytesInBlock; i++) {\n      ecBytes[i] = /*(byte) */toEncode[numDataBytes + i];\n    }\n    return ecBytes;\n  };\n  /**\n   * Append mode info. On success, store the result in \"bits\".\n   */\n  Encoder.appendModeInfo = function (mode, bits) {\n    bits.appendBits(mode.getBits(), 4);\n  };\n  /**\n   * Append length info. On success, store the result in \"bits\".\n   */\n  Encoder.appendLengthInfo = function (numLetters /*int*/, version, mode, bits) {\n    var numBits = mode.getCharacterCountBits(version);\n    if (numLetters >= 1 << numBits) {\n      throw new WriterException(numLetters + ' is bigger than ' + ((1 << numBits) - 1));\n    }\n    bits.appendBits(numLetters, numBits);\n  };\n  /**\n   * Append \"bytes\" in \"mode\" mode (encoding) into \"bits\". On success, store the result in \"bits\".\n   */\n  Encoder.appendBytes = function (content, mode, bits, encoding) {\n    switch (mode) {\n      case Mode.NUMERIC:\n        Encoder.appendNumericBytes(content, bits);\n        break;\n      case Mode.ALPHANUMERIC:\n        Encoder.appendAlphanumericBytes(content, bits);\n        break;\n      case Mode.BYTE:\n        Encoder.append8BitBytes(content, bits, encoding);\n        break;\n      case Mode.KANJI:\n        Encoder.appendKanjiBytes(content, bits);\n        break;\n      default:\n        throw new WriterException('Invalid mode: ' + mode);\n    }\n  };\n  Encoder.getDigit = function (singleCharacter) {\n    return singleCharacter.charCodeAt(0) - 48;\n  };\n  Encoder.isDigit = function (singleCharacter) {\n    var cn = Encoder.getDigit(singleCharacter);\n    return cn >= 0 && cn <= 9;\n  };\n  Encoder.appendNumericBytes = function (content, bits) {\n    var length = content.length;\n    var i = 0;\n    while (i < length) {\n      var num1 = Encoder.getDigit(content.charAt(i));\n      if (i + 2 < length) {\n        // Encode three numeric letters in ten bits.\n        var num2 = Encoder.getDigit(content.charAt(i + 1));\n        var num3 = Encoder.getDigit(content.charAt(i + 2));\n        bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);\n        i += 3;\n      } else if (i + 1 < length) {\n        // Encode two numeric letters in seven bits.\n        var num2 = Encoder.getDigit(content.charAt(i + 1));\n        bits.appendBits(num1 * 10 + num2, 7);\n        i += 2;\n      } else {\n        // Encode one numeric letter in four bits.\n        bits.appendBits(num1, 4);\n        i++;\n      }\n    }\n  };\n  Encoder.appendAlphanumericBytes = function (content, bits) {\n    var length = content.length;\n    var i = 0;\n    while (i < length) {\n      var code1 = Encoder.getAlphanumericCode(content.charCodeAt(i));\n      if (code1 === -1) {\n        throw new WriterException();\n      }\n      if (i + 1 < length) {\n        var code2 = Encoder.getAlphanumericCode(content.charCodeAt(i + 1));\n        if (code2 === -1) {\n          throw new WriterException();\n        }\n        // Encode two alphanumeric letters in 11 bits.\n        bits.appendBits(code1 * 45 + code2, 11);\n        i += 2;\n      } else {\n        // Encode one alphanumeric letter in six bits.\n        bits.appendBits(code1, 6);\n        i++;\n      }\n    }\n  };\n  Encoder.append8BitBytes = function (content, bits, encoding) {\n    var bytes;\n    try {\n      bytes = StringEncoding.encode(content, encoding);\n    } catch (uee /*: UnsupportedEncodingException*/) {\n      throw new WriterException(uee);\n    }\n    for (var i = 0, length_2 = bytes.length; i !== length_2; i++) {\n      var b = bytes[i];\n      bits.appendBits(b, 8);\n    }\n  };\n  /**\n   * @throws WriterException\n   */\n  Encoder.appendKanjiBytes = function (content, bits) {\n    var bytes;\n    try {\n      bytes = StringEncoding.encode(content, CharacterSetECI.SJIS);\n    } catch (uee /*: UnsupportedEncodingException*/) {\n      throw new WriterException(uee);\n    }\n    var length = bytes.length;\n    for (var i = 0; i < length; i += 2) {\n      var byte1 = bytes[i] & 0xFF;\n      var byte2 = bytes[i + 1] & 0xFF;\n      var code = byte1 << 8 & 0xFFFFFFFF | byte2;\n      var subtracted = -1;\n      if (code >= 0x8140 && code <= 0x9ffc) {\n        subtracted = code - 0x8140;\n      } else if (code >= 0xe040 && code <= 0xebbf) {\n        subtracted = code - 0xc140;\n      }\n      if (subtracted === -1) {\n        throw new WriterException('Invalid byte sequence');\n      }\n      var encoded = (subtracted >> 8) * 0xc0 + (subtracted & 0xff);\n      bits.appendBits(encoded, 13);\n    }\n  };\n  Encoder.appendECI = function (eci, bits) {\n    bits.appendBits(Mode.ECI.getBits(), 4);\n    // This is correct for values up to 127, which is all we need now.\n    bits.appendBits(eci.getValue(), 8);\n  };\n  // The original table is defined in the table 5 of JISX0510:2004 (p.19).\n  Encoder.ALPHANUMERIC_TABLE = Int32Array.from([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1]);\n  Encoder.DEFAULT_BYTE_MODE_ENCODING = CharacterSetECI.UTF8.getName(); // \"ISO-8859-1\"\n  return Encoder;\n}();\nexport default Encoder;","map":{"version":3,"names":["EncodeHintType","BitArray","CharacterSetECI","GenericGF","ReedSolomonEncoder","Mode","Version","MaskUtil","ByteMatrix","QRCode","MatrixUtil","StringEncoding","BlockPair","WriterException","Encoder","calculateMaskPenalty","matrix","applyMaskPenaltyRule1","applyMaskPenaltyRule2","applyMaskPenaltyRule3","applyMaskPenaltyRule4","encode","content","ecLevel","hints","encoding","DEFAULT_BYTE_MODE_ENCODING","hasEncodingHint","undefined","get","CHARACTER_SET","toString","mode","chooseMode","headerBits","BYTE","eci","getCharacterSetECIByName","appendECI","appendModeInfo","dataBits","appendBytes","version","QR_VERSION","versionNumber","Number","parseInt","getVersionForNumber","bitsNeeded","calculateBitsNeeded","willFit","recommendVersion","headerAndDataBits","appendBitArray","numLetters","getSizeInBytes","length","appendLengthInfo","ecBlocks","getECBlocksForLevel","numDataBytes","getTotalCodewords","getTotalECCodewords","terminateBits","finalBits","interleaveWithECBytes","getNumBlocks","qrCode","setECLevel","setMode","setVersion","dimension","getDimensionForVersion","maskPattern","chooseMaskPattern","setMaskPattern","buildMatrix","setMatrix","provisionalBitsNeeded","provisionalVersion","chooseVersion","getSize","getCharacterCountBits","getAlphanumericCode","code","ALPHANUMERIC_TABLE","SJIS","getName","isOnlyDoubleByteKanji","KANJI","hasNumeric","hasAlphanumeric","i","length_1","c","charAt","isDigit","charCodeAt","ALPHANUMERIC","NUMERIC","bytes","ignored","byte1","bits","minPenalty","MAX_SAFE_INTEGER","bestMaskPattern","NUM_MASK_PATTERNS","penalty","numInputBits","versionNum","numBytes","numEcBytes","totalInputBytes","capacity","appendBit","numBitsInLastByte","numPaddingBytes","appendBits","getNumDataBytesAndNumECBytesForBlockID","numTotalBytes","numRSBlocks","blockID","numDataBytesInBlock","numECBytesInBlock","numRsBlocksInGroup2","numRsBlocksInGroup1","numTotalBytesInGroup1","Math","floor","numTotalBytesInGroup2","numDataBytesInGroup1","numDataBytesInGroup2","numEcBytesInGroup1","numEcBytesInGroup2","dataBytesOffset","maxNumDataBytes","maxNumEcBytes","blocks","Array","Int32Array","numEcBytesInBlock","size","dataBytes","Uint8Array","toBytes","ecBytes","generateECBytes","push","max","result","blocks_1","e_1","__values","blocks_1_1","next","done","block","value","getDataBytes","blocks_2","e_2","blocks_2_1","getErrorCorrectionBytes","toEncode","QR_CODE_FIELD_256","getBits","numBits","appendNumericBytes","appendAlphanumericBytes","append8BitBytes","appendKanjiBytes","getDigit","singleCharacter","cn","num1","num2","num3","code1","code2","uee","length_2","b","byte2","subtracted","encoded","ECI","getValue","from","UTF8"],"sources":["../../../../../src/core/qrcode/encoder/Encoder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}