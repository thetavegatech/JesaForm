{"ast":null,"code":"/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Result from '../Result';\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport ResultMetadataType from '../ResultMetadataType';\nimport System from '../util/System';\nimport Decoder from './decoder/Decoder';\nimport Detector from './detector/Detector';\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\nvar AztecReader = /** @class */function () {\n  function AztecReader() {}\n  /**\n   * Locates and decodes a Data Matrix code in an image.\n   *\n   * @return a String representing the content encoded by the Data Matrix code\n   * @throws NotFoundException if a Data Matrix code cannot be found\n   * @throws FormatException if a Data Matrix code cannot be decoded\n   */\n  AztecReader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n    var exception = null;\n    var detector = new Detector(image.getBlackMatrix());\n    var points = null;\n    var decoderResult = null;\n    try {\n      var detectorResult = detector.detectMirror(false);\n      points = detectorResult.getPoints();\n      this.reportFoundResultPoints(hints, points);\n      decoderResult = new Decoder().decode(detectorResult);\n    } catch (e) {\n      exception = e;\n    }\n    if (decoderResult == null) {\n      try {\n        var detectorResult = detector.detectMirror(true);\n        points = detectorResult.getPoints();\n        this.reportFoundResultPoints(hints, points);\n        decoderResult = new Decoder().decode(detectorResult);\n      } catch (e) {\n        if (exception != null) {\n          throw exception;\n        }\n        throw e;\n      }\n    }\n    var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat.AZTEC, System.currentTimeMillis());\n    var byteSegments = decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS, byteSegments);\n    }\n    var ecLevel = decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, ecLevel);\n    }\n    return result;\n  };\n  AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n    if (hints != null) {\n      var rpcb_1 = hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n      if (rpcb_1 != null) {\n        points.forEach(function (point, idx, arr) {\n          rpcb_1.foundPossibleResultPoint(point);\n        });\n      }\n    }\n  };\n  // @Override\n  AztecReader.prototype.reset = function () {\n    // do nothing\n  };\n  return AztecReader;\n}();\nexport default AztecReader;","map":{"version":3,"names":["Result","BarcodeFormat","DecodeHintType","ResultMetadataType","System","Decoder","Detector","AztecReader","prototype","decode","image","hints","exception","detector","getBlackMatrix","points","decoderResult","detectorResult","detectMirror","getPoints","reportFoundResultPoints","e","result","getText","getRawBytes","getNumBits","AZTEC","currentTimeMillis","byteSegments","getByteSegments","putMetadata","BYTE_SEGMENTS","ecLevel","getECLevel","ERROR_CORRECTION_LEVEL","rpcb_1","get","NEED_RESULT_POINT_CALLBACK","forEach","point","idx","arr","foundPossibleResultPoint","reset"],"sources":["../../../../src/core/aztec/AztecReader.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}