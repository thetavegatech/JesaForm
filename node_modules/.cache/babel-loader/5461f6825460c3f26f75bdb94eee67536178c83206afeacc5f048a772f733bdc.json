{"ast":null,"code":"/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport MathUtils from '../../common/detector/MathUtils';\nimport DetectorResult from '../../common/DetectorResult';\n// import GridSampler from '../../common/GridSampler';\nimport GridSamplerInstance from '../../common/GridSamplerInstance';\nimport PerspectiveTransform from '../../common/PerspectiveTransform';\nimport DecodeHintType from '../../DecodeHintType';\nimport NotFoundException from '../../NotFoundException';\nimport ResultPoint from '../../ResultPoint';\nimport Version from '../decoder/Version';\nimport AlignmentPatternFinder from './AlignmentPatternFinder';\nimport FinderPatternFinder from './FinderPatternFinder';\n/*import java.util.Map;*/\n/**\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\nvar Detector = /** @class */function () {\n  function Detector(image) {\n    this.image = image;\n  }\n  Detector.prototype.getImage = function () {\n    return this.image;\n  };\n  Detector.prototype.getResultPointCallback = function () {\n    return this.resultPointCallback;\n  };\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n  // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n  //   return detect(null)\n  // }\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @param hints optional hints to detector\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n  Detector.prototype.detect = function (hints) {\n    this.resultPointCallback = hints === null || hints === undefined ? null : /*(ResultPointCallback) */hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n    var finder = new FinderPatternFinder(this.image, this.resultPointCallback);\n    var info = finder.find(hints);\n    return this.processFinderPatternInfo(info);\n  };\n  Detector.prototype.processFinderPatternInfo = function (info) {\n    var topLeft = info.getTopLeft();\n    var topRight = info.getTopRight();\n    var bottomLeft = info.getBottomLeft();\n    var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n    if (moduleSize < 1.0) {\n      throw new NotFoundException('No pattern found in proccess finder.');\n    }\n    var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n    var provisionalVersion = Version.getProvisionalVersionForDimension(dimension);\n    var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n    var alignmentPattern = null;\n    // Anything above version 1 has an alignment pattern\n    if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n      // Guess where a \"bottom right\" finder pattern would have been\n      var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      // Estimate that alignment pattern is closer by 3 modules\n      // from \"bottom right\" to known top left location\n      var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n      var estAlignmentX = /*(int) */Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n      var estAlignmentY = /*(int) */Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\n      // Kind of arbitrary -- expand search radius before giving up\n      for (var i = 4; i <= 16; i <<= 1) {\n        try {\n          alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n          break;\n        } catch (re /*NotFoundException*/) {\n          if (!(re instanceof NotFoundException)) {\n            throw re;\n          }\n          // try next round\n        }\n      }\n      // If we didn't find alignment pattern... well try anyway without it\n    }\n    var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n    var bits = Detector.sampleGrid(this.image, transform, dimension);\n    var points;\n    if (alignmentPattern === null) {\n      points = [bottomLeft, topLeft, topRight];\n    } else {\n      points = [bottomLeft, topLeft, topRight, alignmentPattern];\n    }\n    return new DetectorResult(bits, points);\n  };\n  Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension /*int*/) {\n    var dimMinusThree = dimension - 3.5;\n    var bottomRightX; /*float*/\n    var bottomRightY; /*float*/\n    var sourceBottomRightX; /*float*/\n    var sourceBottomRightY; /*float*/\n    if (alignmentPattern !== null) {\n      bottomRightX = alignmentPattern.getX();\n      bottomRightY = alignmentPattern.getY();\n      sourceBottomRightX = dimMinusThree - 3.0;\n      sourceBottomRightY = sourceBottomRightX;\n    } else {\n      // Don't have an alignment pattern, just make up the bottom-right point\n      bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      sourceBottomRightX = dimMinusThree;\n      sourceBottomRightY = dimMinusThree;\n    }\n    return PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n  };\n  Detector.sampleGrid = function (image, transform, dimension /*int*/) {\n    var sampler = GridSamplerInstance.getInstance();\n    return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n  };\n  /**\n   * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n   * of the finder patterns and estimated module size.</p>\n   */\n  Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize /*float*/) {\n    var tltrCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, topRight) / moduleSize);\n    var tlblCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, bottomLeft) / moduleSize);\n    var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n    switch (dimension & 0x03) {\n      // mod 4\n      case 0:\n        dimension++;\n        break;\n      // 1? do nothing\n      case 2:\n        dimension--;\n        break;\n      case 3:\n        throw new NotFoundException('Dimensions could be not found.');\n    }\n    return dimension;\n  };\n  /**\n   * <p>Computes an average estimated module size based on estimated derived from the positions\n   * of the three finder patterns.</p>\n   *\n   * @param topLeft detected top-left finder pattern center\n   * @param topRight detected top-right finder pattern center\n   * @param bottomLeft detected bottom-left finder pattern center\n   * @return estimated module size\n   */\n  Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n    // Take the average\n    return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n  };\n  /**\n   * <p>Estimates module size based on two finder patterns -- it uses\n   * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n   * width of each, measuring along the axis between their centers.</p>\n   */\n  Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n    var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays( /*(int) */Math.floor(pattern.getX()), /*(int) */Math.floor(pattern.getY()), /*(int) */Math.floor(otherPattern.getX()), /*(int) */Math.floor(otherPattern.getY()));\n    var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays( /*(int) */Math.floor(otherPattern.getX()), /*(int) */Math.floor(otherPattern.getY()), /*(int) */Math.floor(pattern.getX()), /*(int) */Math.floor(pattern.getY()));\n    if (isNaN(moduleSizeEst1)) {\n      return moduleSizeEst2 / 7.0;\n    }\n    if (isNaN(moduleSizeEst2)) {\n      return moduleSizeEst1 / 7.0;\n    }\n    // Average them, and divide by 7 since we've counted the width of 3 black modules,\n    // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n    return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n  };\n  /**\n   * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n   * a finder pattern by looking for a black-white-black run from the center in the direction\n   * of another point (another finder pattern center), and in the opposite direction too.\n   */\n  Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n    var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\n    // Now count other way -- don't run off image though of course\n    var scale = 1.0;\n    var otherToX = fromX - (toX - fromX);\n    if (otherToX < 0) {\n      scale = fromX / ( /*(float) */fromX - otherToX);\n      otherToX = 0;\n    } else if (otherToX >= this.image.getWidth()) {\n      scale = (this.image.getWidth() - 1 - fromX) / ( /*(float) */otherToX - fromX);\n      otherToX = this.image.getWidth() - 1;\n    }\n    var otherToY = /*(int) */Math.floor(fromY - (toY - fromY) * scale);\n    scale = 1.0;\n    if (otherToY < 0) {\n      scale = fromY / ( /*(float) */fromY - otherToY);\n      otherToY = 0;\n    } else if (otherToY >= this.image.getHeight()) {\n      scale = (this.image.getHeight() - 1 - fromY) / ( /*(float) */otherToY - fromY);\n      otherToY = this.image.getHeight() - 1;\n    }\n    otherToX = /*(int) */Math.floor(fromX + (otherToX - fromX) * scale);\n    result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\n    // Middle pixel is double-counted this way; subtract 1\n    return result - 1.0;\n  };\n  /**\n   * <p>This method traces a line from a point in the image, in the direction towards another point.\n   * It begins in a black region, and keeps going until it finds white, then black, then white again.\n   * It reports the distance from the start to this point.</p>\n   *\n   * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n   * may be skewed or rotated.</p>\n   */\n  Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n    // Mild variant of Bresenham's algorithm\n    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n    if (steep) {\n      var temp = fromX;\n      fromX = fromY;\n      fromY = temp;\n      temp = toX;\n      toX = toY;\n      toY = temp;\n    }\n    var dx = Math.abs(toX - fromX);\n    var dy = Math.abs(toY - fromY);\n    var error = -dx / 2;\n    var xstep = fromX < toX ? 1 : -1;\n    var ystep = fromY < toY ? 1 : -1;\n    // In black pixels, looking for white, first or second time.\n    var state = 0;\n    // Loop up until x == toX, but not beyond\n    var xLimit = toX + xstep;\n    for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n      var realX = steep ? y : x;\n      var realY = steep ? x : y;\n      // Does current pixel mean we have moved white to black or vice versa?\n      // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n      // color, advance to next state or end if we are in state 2 already\n      if (state === 1 === this.image.get(realX, realY)) {\n        if (state === 2) {\n          return MathUtils.distance(x, y, fromX, fromY);\n        }\n        state++;\n      }\n      error += dy;\n      if (error > 0) {\n        if (y === toY) {\n          break;\n        }\n        y += ystep;\n        error -= dx;\n      }\n    }\n    // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n    // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n    // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n    if (state === 2) {\n      return MathUtils.distance(toX + xstep, toY, fromX, fromY);\n    }\n    // else we didn't find even black-white-black; no estimate is really possible\n    return NaN;\n  };\n  /**\n   * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n   * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n   *\n   * @param overallEstModuleSize estimated module size so far\n   * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n   * @param estAlignmentY y coordinate of above\n   * @param allowanceFactor number of pixels in all directions to search from the center\n   * @return {@link AlignmentPattern} if found, or null otherwise\n   * @throws NotFoundException if an unexpected error occurs during detection\n   */\n  Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize /*float*/, estAlignmentX /*int*/, estAlignmentY /*int*/, allowanceFactor /*float*/) {\n    // Look for an alignment pattern (3 modules in size) around where it\n    // should be\n    var allowance = /*(int) */Math.floor(allowanceFactor * overallEstModuleSize);\n    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n    var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n    if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n      throw new NotFoundException('Alignment top exceeds estimated module size.');\n    }\n    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n    var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n    if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n      throw new NotFoundException('Alignment bottom exceeds estimated module size.');\n    }\n    var alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n    return alignmentFinder.find();\n  };\n  return Detector;\n}();\nexport default Detector;","map":{"version":3,"names":["MathUtils","DetectorResult","GridSamplerInstance","PerspectiveTransform","DecodeHintType","NotFoundException","ResultPoint","Version","AlignmentPatternFinder","FinderPatternFinder","Detector","image","prototype","getImage","getResultPointCallback","resultPointCallback","detect","hints","undefined","get","NEED_RESULT_POINT_CALLBACK","finder","info","find","processFinderPatternInfo","topLeft","getTopLeft","topRight","getTopRight","bottomLeft","getBottomLeft","moduleSize","calculateModuleSize","dimension","computeDimension","provisionalVersion","getProvisionalVersionForDimension","modulesBetweenFPCenters","getDimensionForVersion","alignmentPattern","getAlignmentPatternCenters","length","bottomRightX","getX","bottomRightY","getY","correctionToTopLeft","estAlignmentX","Math","floor","estAlignmentY","i","findAlignmentInRegion","re","transform","createTransform","bits","sampleGrid","points","dimMinusThree","sourceBottomRightX","sourceBottomRightY","quadrilateralToQuadrilateral","sampler","getInstance","sampleGridWithTransform","tltrCentersDimension","round","distance","tlblCentersDimension","calculateModuleSizeOneWay","pattern","otherPattern","moduleSizeEst1","sizeOfBlackWhiteBlackRunBothWays","moduleSizeEst2","isNaN","fromX","fromY","toX","toY","result","sizeOfBlackWhiteBlackRun","scale","otherToX","getWidth","otherToY","getHeight","steep","abs","temp","dx","dy","error","xstep","ystep","state","xLimit","x","y","realX","realY","NaN","overallEstModuleSize","allowanceFactor","allowance","alignmentAreaLeftX","max","alignmentAreaRightX","min","alignmentAreaTopY","alignmentAreaBottomY","alignmentFinder"],"sources":["../../../../../src/core/qrcode/detector/Detector.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}