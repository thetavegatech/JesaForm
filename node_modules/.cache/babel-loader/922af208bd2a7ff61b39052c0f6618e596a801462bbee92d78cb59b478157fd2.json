{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport OneDReader from './OneDReader';\nimport NotFoundException from '../NotFoundException';\nimport FormatException from '../FormatException';\n/**\n * <p>Encapsulates functionality and implementation that is common to UPC and EAN families\n * of one-dimensional barcodes.</p>\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Sean Owen\n * @author alasdair@google.com (Alasdair Mackintosh)\n */\nvar AbstractUPCEANReader = /** @class */function (_super) {\n  __extends(AbstractUPCEANReader, _super);\n  function AbstractUPCEANReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.decodeRowStringBuffer = '';\n    return _this;\n  }\n  // private final UPCEANExtensionSupport extensionReader;\n  // private final EANManufacturerOrgSupport eanManSupport;\n  /*\n  protected UPCEANReader() {\n      decodeRowStringBuffer = new StringBuilder(20);\n      extensionReader = new UPCEANExtensionSupport();\n      eanManSupport = new EANManufacturerOrgSupport();\n  }\n  */\n  AbstractUPCEANReader.findStartGuardPattern = function (row) {\n    var foundStart = false;\n    var startRange;\n    var nextStart = 0;\n    var counters = Int32Array.from([0, 0, 0]);\n    while (!foundStart) {\n      counters = Int32Array.from([0, 0, 0]);\n      startRange = AbstractUPCEANReader.findGuardPattern(row, nextStart, false, this.START_END_PATTERN, counters);\n      var start = startRange[0];\n      nextStart = startRange[1];\n      var quietStart = start - (nextStart - start);\n      if (quietStart >= 0) {\n        foundStart = row.isRange(quietStart, start, false);\n      }\n    }\n    return startRange;\n  };\n  AbstractUPCEANReader.checkChecksum = function (s) {\n    return AbstractUPCEANReader.checkStandardUPCEANChecksum(s);\n  };\n  AbstractUPCEANReader.checkStandardUPCEANChecksum = function (s) {\n    var length = s.length;\n    if (length === 0) return false;\n    var check = parseInt(s.charAt(length - 1), 10);\n    return AbstractUPCEANReader.getStandardUPCEANChecksum(s.substring(0, length - 1)) === check;\n  };\n  AbstractUPCEANReader.getStandardUPCEANChecksum = function (s) {\n    var length = s.length;\n    var sum = 0;\n    for (var i = length - 1; i >= 0; i -= 2) {\n      var digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n      if (digit < 0 || digit > 9) {\n        throw new FormatException();\n      }\n      sum += digit;\n    }\n    sum *= 3;\n    for (var i = length - 2; i >= 0; i -= 2) {\n      var digit = s.charAt(i).charCodeAt(0) - '0'.charCodeAt(0);\n      if (digit < 0 || digit > 9) {\n        throw new FormatException();\n      }\n      sum += digit;\n    }\n    return (1000 - sum) % 10;\n  };\n  AbstractUPCEANReader.decodeEnd = function (row, endStart) {\n    return AbstractUPCEANReader.findGuardPattern(row, endStart, false, AbstractUPCEANReader.START_END_PATTERN, new Int32Array(AbstractUPCEANReader.START_END_PATTERN.length).fill(0));\n  };\n  /**\n   * @throws NotFoundException\n   */\n  AbstractUPCEANReader.findGuardPatternWithoutCounters = function (row, rowOffset, whiteFirst, pattern) {\n    return this.findGuardPattern(row, rowOffset, whiteFirst, pattern, new Int32Array(pattern.length));\n  };\n  /**\n   * @param row row of black/white values to search\n   * @param rowOffset position to start search\n   * @param whiteFirst if true, indicates that the pattern specifies white/black/white/...\n   * pixel counts, otherwise, it is interpreted as black/white/black/...\n   * @param pattern pattern of counts of number of black and white pixels that are being\n   * searched for as a pattern\n   * @param counters array of counters, as long as pattern, to re-use\n   * @return start/end horizontal offset of guard pattern, as an array of two ints\n   * @throws NotFoundException if pattern is not found\n   */\n  AbstractUPCEANReader.findGuardPattern = function (row, rowOffset, whiteFirst, pattern, counters) {\n    var width = row.getSize();\n    rowOffset = whiteFirst ? row.getNextUnset(rowOffset) : row.getNextSet(rowOffset);\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    var patternLength = pattern.length;\n    var isWhite = whiteFirst;\n    for (var x = rowOffset; x < width; x++) {\n      if (row.get(x) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          if (OneDReader.patternMatchVariance(counters, pattern, AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE) < AbstractUPCEANReader.MAX_AVG_VARIANCE) {\n            return Int32Array.from([patternStart, x]);\n          }\n          patternStart += counters[0] + counters[1];\n          var slice = counters.slice(2, counters.length - 1);\n          for (var i = 0; i < counterPosition - 1; i++) {\n            counters[i] = slice[i];\n          }\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n    throw new NotFoundException();\n  };\n  AbstractUPCEANReader.decodeDigit = function (row, counters, rowOffset, patterns) {\n    this.recordPattern(row, rowOffset, counters);\n    var bestVariance = this.MAX_AVG_VARIANCE;\n    var bestMatch = -1;\n    var max = patterns.length;\n    for (var i = 0; i < max; i++) {\n      var pattern = patterns[i];\n      var variance = OneDReader.patternMatchVariance(counters, pattern, AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE);\n      if (variance < bestVariance) {\n        bestVariance = variance;\n        bestMatch = i;\n      }\n    }\n    if (bestMatch >= 0) {\n      return bestMatch;\n    } else {\n      throw new NotFoundException();\n    }\n  };\n  // These two values are critical for determining how permissive the decoding will be.\n  // We've arrived at these values through a lot of trial and error. Setting them any higher\n  // lets false positives creep in quickly.\n  AbstractUPCEANReader.MAX_AVG_VARIANCE = 0.48;\n  AbstractUPCEANReader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n  /**\n   * Start/end guard pattern.\n   */\n  AbstractUPCEANReader.START_END_PATTERN = Int32Array.from([1, 1, 1]);\n  /**\n   * Pattern marking the middle of a UPC/EAN pattern, separating the two halves.\n   */\n  AbstractUPCEANReader.MIDDLE_PATTERN = Int32Array.from([1, 1, 1, 1, 1]);\n  /**\n   * end guard pattern.\n   */\n  AbstractUPCEANReader.END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);\n  /**\n   * \"Odd\", or \"L\" patterns used to encode UPC/EAN digits.\n   */\n  AbstractUPCEANReader.L_PATTERNS = [Int32Array.from([3, 2, 1, 1]), Int32Array.from([2, 2, 2, 1]), Int32Array.from([2, 1, 2, 2]), Int32Array.from([1, 4, 1, 1]), Int32Array.from([1, 1, 3, 2]), Int32Array.from([1, 2, 3, 1]), Int32Array.from([1, 1, 1, 4]), Int32Array.from([1, 3, 1, 2]), Int32Array.from([1, 2, 1, 3]), Int32Array.from([3, 1, 1, 2])];\n  return AbstractUPCEANReader;\n}(OneDReader);\nexport default AbstractUPCEANReader;","map":{"version":3,"names":["OneDReader","NotFoundException","FormatException","AbstractUPCEANReader","_super","__extends","_this","apply","arguments","decodeRowStringBuffer","findStartGuardPattern","row","foundStart","startRange","nextStart","counters","Int32Array","from","findGuardPattern","START_END_PATTERN","start","quietStart","isRange","checkChecksum","s","checkStandardUPCEANChecksum","length","check","parseInt","charAt","getStandardUPCEANChecksum","substring","sum","i","digit","charCodeAt","decodeEnd","endStart","fill","findGuardPatternWithoutCounters","rowOffset","whiteFirst","pattern","width","getSize","getNextUnset","getNextSet","counterPosition","patternStart","patternLength","isWhite","x","get","patternMatchVariance","MAX_INDIVIDUAL_VARIANCE","MAX_AVG_VARIANCE","slice","decodeDigit","patterns","recordPattern","bestVariance","bestMatch","max","variance","MIDDLE_PATTERN","END_PATTERN","L_PATTERNS"],"sources":["../../../../src/core/oned/AbstractUPCEANReader.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}