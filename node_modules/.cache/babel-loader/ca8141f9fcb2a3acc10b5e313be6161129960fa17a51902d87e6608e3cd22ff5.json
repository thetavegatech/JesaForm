{"ast":null,"code":"/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*namespace com.google.zxing.qrcode.decoder {*/\nimport ChecksumException from '../../ChecksumException';\nimport BitMatrix from '../../common/BitMatrix';\nimport GenericGF from '../../common/reedsolomon/GenericGF';\nimport ReedSolomonDecoder from '../../common/reedsolomon/ReedSolomonDecoder';\nimport BitMatrixParser from './BitMatrixParser';\nimport DataBlock from './DataBlock';\nimport DecodedBitStreamParser from './DecodedBitStreamParser';\nimport QRCodeDecoderMetaData from './QRCodeDecoderMetaData';\n/*import java.util.Map;*/\n/**\n * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\n * the QR Code from an image.</p>\n *\n * @author Sean Owen\n */\nvar Decoder = /** @class */function () {\n  function Decoder() {\n    this.rsDecoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n  }\n  // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(image, null)\n  // }\n  /**\n   * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\n   * \"true\" is taken to mean a black module.</p>\n   *\n   * @param image booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n  Decoder.prototype.decodeBooleanArray = function (image, hints) {\n    return this.decodeBitMatrix(BitMatrix.parseFromBooleanArray(image), hints);\n  };\n  // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(bits, null)\n  // }\n  /**\n   * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n   *\n   * @param bits booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n  Decoder.prototype.decodeBitMatrix = function (bits, hints) {\n    // Construct a parser and read version, error-correction level\n    var parser = new BitMatrixParser(bits);\n    var ex = null;\n    try {\n      return this.decodeBitMatrixParser(parser, hints);\n    } catch (e /*: FormatException, ChecksumException*/) {\n      ex = e;\n    }\n    try {\n      // Revert the bit matrix\n      parser.remask();\n      // Will be attempting a mirrored reading of the version and format info.\n      parser.setMirror(true);\n      // Preemptively read the version.\n      parser.readVersion();\n      // Preemptively read the format information.\n      parser.readFormatInformation();\n      /*\n       * Since we're here, this means we have successfully detected some kind\n       * of version and format information when mirrored. This is a good sign,\n       * that the QR code may be mirrored, and we should try once more with a\n       * mirrored content.\n       */\n      // Prepare for a mirrored reading.\n      parser.mirror();\n      var result = this.decodeBitMatrixParser(parser, hints);\n      // Success! Notify the caller that the code was mirrored.\n      result.setOther(new QRCodeDecoderMetaData(true));\n      return result;\n    } catch (e /*FormatException | ChecksumException*/) {\n      // Throw the exception from the original reading\n      if (ex !== null) {\n        throw ex;\n      }\n      throw e;\n    }\n  };\n  Decoder.prototype.decodeBitMatrixParser = function (parser, hints) {\n    var e_1, _a, e_2, _b;\n    var version = parser.readVersion();\n    var ecLevel = parser.readFormatInformation().getErrorCorrectionLevel();\n    // Read codewords\n    var codewords = parser.readCodewords();\n    // Separate into data blocks\n    var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);\n    // Count total number of data bytes\n    var totalBytes = 0;\n    try {\n      for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n        var dataBlock = dataBlocks_1_1.value;\n        totalBytes += dataBlock.getNumDataCodewords();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var resultBytes = new Uint8Array(totalBytes);\n    var resultOffset = 0;\n    try {\n      // Error-correct and copy data blocks together into a stream of bytes\n      for (var dataBlocks_2 = __values(dataBlocks), dataBlocks_2_1 = dataBlocks_2.next(); !dataBlocks_2_1.done; dataBlocks_2_1 = dataBlocks_2.next()) {\n        var dataBlock = dataBlocks_2_1.value;\n        var codewordBytes = dataBlock.getCodewords();\n        var numDataCodewords = dataBlock.getNumDataCodewords();\n        this.correctErrors(codewordBytes, numDataCodewords);\n        for (var i = 0; i < numDataCodewords; i++) {\n          resultBytes[resultOffset++] = codewordBytes[i];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_2_1 && !dataBlocks_2_1.done && (_b = dataBlocks_2.return)) _b.call(dataBlocks_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    // Decode the contents of that stream of bytes\n    return DecodedBitStreamParser.decode(resultBytes, version, ecLevel, hints);\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place using Reed-Solomon error correction.</p>\n   *\n   * @param codewordBytes data and error correction codewords\n   * @param numDataCodewords number of codewords that are data bytes\n   * @throws ChecksumException if error correction fails\n   */\n  Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords /*int*/) {\n    // const numCodewords = codewordBytes.length;\n    // First read into an array of ints\n    var codewordsInts = new Int32Array(codewordBytes);\n    // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\n    // const codewordsInts = new Int32Array(numCodewords)\n    // for (let i = 0; i < numCodewords; i++) {\n    //   codewordsInts[i] = codewordBytes[i] & 0xFF\n    // }\n    try {\n      this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n    } catch (ignored /*: ReedSolomonException*/) {\n      throw new ChecksumException();\n    }\n    // Copy back into array of bytes -- only need to worry about the bytes that were data\n    // We don't care about errors in the error-correction codewords\n    for (var i = 0; i < numDataCodewords; i++) {\n      codewordBytes[i] = /*(byte) */codewordsInts[i];\n    }\n  };\n  return Decoder;\n}();\nexport default Decoder;","map":{"version":3,"names":["ChecksumException","BitMatrix","GenericGF","ReedSolomonDecoder","BitMatrixParser","DataBlock","DecodedBitStreamParser","QRCodeDecoderMetaData","Decoder","rsDecoder","QR_CODE_FIELD_256","prototype","decodeBooleanArray","image","hints","decodeBitMatrix","parseFromBooleanArray","bits","parser","ex","decodeBitMatrixParser","e","remask","setMirror","readVersion","readFormatInformation","mirror","result","setOther","version","ecLevel","getErrorCorrectionLevel","codewords","readCodewords","dataBlocks","getDataBlocks","totalBytes","dataBlocks_1","__values","dataBlocks_1_1","next","done","dataBlock","value","getNumDataCodewords","resultBytes","Uint8Array","resultOffset","dataBlocks_2","dataBlocks_2_1","codewordBytes","getCodewords","numDataCodewords","correctErrors","i","decode","codewordsInts","Int32Array","length","ignored"],"sources":["../../../../../src/core/qrcode/decoder/Decoder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}