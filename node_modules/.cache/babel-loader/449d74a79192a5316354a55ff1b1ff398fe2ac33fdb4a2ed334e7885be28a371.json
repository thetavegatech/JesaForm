{"ast":null,"code":"/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// import com.google.zxing.pdf417.PDF417Common;\nimport PDF417Common from '../PDF417Common';\nimport BarcodeMetadata from './BarcodeMetadata';\nimport DetectionResultColumn from './DetectionResultColumn';\nimport BarcodeValue from './BarcodeValue';\n/**\n * @author Guenther Grau\n */\nvar DetectionResultRowIndicatorColumn = /** @class */function (_super) {\n  __extends(DetectionResultRowIndicatorColumn, _super);\n  function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n    var _this = _super.call(this, boundingBox) || this;\n    _this._isLeft = isLeft;\n    return _this;\n  }\n  DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value /*Codeword*/;\n        if (codeword != null) {\n          codeword.setRowNumberAsRowIndicatorColumn();\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  // TODO implement properly\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n  DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var codewords = this.getCodewords();\n    this.setRowNumbers();\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n    // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n    // taller rows\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n    for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var codeword = codewords[codewordsRow];\n      //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n      //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n      //        SimpleLog.log(LEVEL.WARNING,\n      //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n      //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n      //        codewords[codewordsRow] = null;\n      //      }\n      var rowDifference = codeword.getRowNumber() - barcodeRow;\n      // TODO improve handling with case where first row indicator doesn't start with 0\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (rowDifference < 0 || codeword.getRowNumber() >= barcodeMetadata.getRowCount() || rowDifference > codewordsRow) {\n        codewords[codewordsRow] = null;\n      } else {\n        var checkedRows = void 0;\n        if (maxRowHeight > 2) {\n          checkedRows = (maxRowHeight - 2) * rowDifference;\n        } else {\n          checkedRows = rowDifference;\n        }\n        var closePreviousCodewordFound = checkedRows >= codewordsRow;\n        for (var i /*int*/ = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n          // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n          // This should hopefully get rid of most problems already.\n          closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n        }\n        if (closePreviousCodewordFound) {\n          codewords[codewordsRow] = null;\n        } else {\n          barcodeRow = codeword.getRowNumber();\n          currentRowHeight = 1;\n        }\n      }\n    }\n    // return (int) (averageRowHeight + 0.5);\n  };\n  DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n    var e_2, _a;\n    var barcodeMetadata = this.getBarcodeMetadata();\n    if (barcodeMetadata == null) {\n      return null;\n    }\n    this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n    var result = new Int32Array(barcodeMetadata.getRowCount());\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value /*Codeword*/;\n        if (codeword != null) {\n          var rowNumber = codeword.getRowNumber();\n          if (rowNumber >= result.length) {\n            // We have more rows than the barcode metadata allows for, ignore them.\n            continue;\n          }\n          result[rowNumber]++;\n        } // else throw exception?\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return result;\n  };\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n  DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n    var codewords = this.getCodewords();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n    for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n      var codeword = codewords[codewordsRow];\n      codeword.setRowNumberAsRowIndicatorColumn();\n      var rowDifference = codeword.getRowNumber() - barcodeRow;\n      // TODO improve handling with case where first row indicator doesn't start with 0\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n        codewords[codewordsRow] = null;\n      } else {\n        barcodeRow = codeword.getRowNumber();\n        currentRowHeight = 1;\n      }\n    }\n    // return (int) (averageRowHeight + 0.5);\n  };\n  DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n    var e_3, _a;\n    var codewords = this.getCodewords();\n    var barcodeColumnCount = new BarcodeValue();\n    var barcodeRowCountUpperPart = new BarcodeValue();\n    var barcodeRowCountLowerPart = new BarcodeValue();\n    var barcodeECLevel = new BarcodeValue();\n    try {\n      for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n        var codeword = codewords_1_1.value /*Codeword*/;\n        if (codeword == null) {\n          continue;\n        }\n        codeword.setRowNumberAsRowIndicatorColumn();\n        var rowIndicatorValue = codeword.getValue() % 30;\n        var codewordRowNumber = codeword.getRowNumber();\n        if (!this._isLeft) {\n          codewordRowNumber += 2;\n        }\n        switch (codewordRowNumber % 3) {\n          case 0:\n            barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n            break;\n          case 1:\n            barcodeECLevel.setValue(rowIndicatorValue / 3);\n            barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n            break;\n          case 2:\n            barcodeColumnCount.setValue(rowIndicatorValue + 1);\n            break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    // Maybe we should check if we have ambiguous values?\n    if (barcodeColumnCount.getValue().length === 0 || barcodeRowCountUpperPart.getValue().length === 0 || barcodeRowCountLowerPart.getValue().length === 0 || barcodeECLevel.getValue().length === 0 || barcodeColumnCount.getValue()[0] < 1 || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common.MIN_ROWS_IN_BARCODE || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common.MAX_ROWS_IN_BARCODE) {\n      return null;\n    }\n    var barcodeMetadata = new BarcodeMetadata(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    return barcodeMetadata;\n  };\n  DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n    // Remove codewords which do not match the metadata\n    // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n    for (var codewordRow /*int*/ = 0; codewordRow < codewords.length; codewordRow++) {\n      var codeword = codewords[codewordRow];\n      if (codewords[codewordRow] == null) {\n        continue;\n      }\n      var rowIndicatorValue = codeword.getValue() % 30;\n      var codewordRowNumber = codeword.getRowNumber();\n      if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n        codewords[codewordRow] = null;\n        continue;\n      }\n      if (!this._isLeft) {\n        codewordRowNumber += 2;\n      }\n      switch (codewordRowNumber % 3) {\n        case 0:\n          if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n        case 1:\n          if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() || rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n        case 2:\n          if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n            codewords[codewordRow] = null;\n          }\n          break;\n      }\n    }\n  };\n  DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n    return this._isLeft;\n  };\n  // @Override\n  DetectionResultRowIndicatorColumn.prototype.toString = function () {\n    return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n  };\n  return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn);\nexport default DetectionResultRowIndicatorColumn;","map":{"version":3,"names":["PDF417Common","BarcodeMetadata","DetectionResultColumn","BarcodeValue","DetectionResultRowIndicatorColumn","_super","__extends","boundingBox","isLeft","_this","call","_isLeft","prototype","setRowNumbers","_b","__values","getCodewords","_c","next","done","codeword","value","setRowNumberAsRowIndicatorColumn","adjustCompleteIndicatorColumnRowNumbers","barcodeMetadata","codewords","removeIncorrectCodewords","getBoundingBox","top","getTopLeft","getTopRight","bottom","getBottomLeft","getBottomRight","firstRow","imageRowToCodewordIndex","Math","trunc","getY","lastRow","barcodeRow","maxRowHeight","currentRowHeight","codewordsRow","rowDifference","getRowNumber","max","getRowCount","checkedRows","closePreviousCodewordFound","i","getRowHeights","getBarcodeMetadata","adjustIncompleteIndicatorColumnRowNumbers","result","Int32Array","rowNumber","length","barcodeColumnCount","barcodeRowCountUpperPart","barcodeRowCountLowerPart","barcodeECLevel","codewords_1","codewords_1_1","rowIndicatorValue","getValue","codewordRowNumber","setValue","MIN_ROWS_IN_BARCODE","MAX_ROWS_IN_BARCODE","codewordRow","getRowCountUpperPart","getErrorCorrectionLevel","getRowCountLowerPart","getColumnCount","toString"],"sources":["../../../../../src/core/pdf417/decoder/DetectionResultRowIndicatorColumn.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}